
// Code generated by stanc 4fa29e29
#include <stan/model/model_header.hpp>
namespace source_counts_linear_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 37> locations_array__ = 
{" (found before start of program)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 29, column 2 to column 13)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 30, column 2 to column 10)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 31, column 2 to column 24)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 35, column 2 to column 21)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 36, column 2 to column 23)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 39, column 4 to column 45)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 38, column 20 to line 40, column 3)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 38, column 2 to line 40, column 3)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 52, column 2 to column 27)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 53, column 2 to column 27)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 56, column 4 to column 53)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 57, column 4 to column 63)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 55, column 21 to line 58, column 3)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 55, column 2 to line 58, column 3)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 44, column 2 to column 20)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 45, column 2 to column 24)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 46, column 2 to column 25)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 48, column 2 to column 32)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 15, column 2 to column 24)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 16, column 22 to column 28)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 16, column 2 to column 30)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 17, column 2 to column 25)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 18, column 26 to column 33)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 18, column 2 to column 35)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 19, column 25 to column 31)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 19, column 2 to column 33)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 23, column 9 to column 15)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 23, column 2 to column 17)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 25, column 2 to column 18)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 35, column 13 to column 19)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 52, column 18 to column 25)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 53, column 18 to column 25)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 6, column 6 to column 17)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 8, column 6 to column 36)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 9, column 6 to column 19)",
 " (in 'Treg_dynamics/models/source_counts_linear.stan', line 4, column 17 to line 10, column 4)"};

struct theta_spline_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  operator()(const T0__& t, const T1__& mu, const T2__& theta0,
             std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  theta_spline(const T0__& t, const T1__& mu, const T2__& theta0,
               std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 34;
      theta = (theta0 * stan::math::exp((-mu * t)));
      current_statement__ = 35;
      return theta;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
theta_spline_functor__::operator()(const T0__& t, const T1__& mu,
                                   const T2__& theta0,
                                   std::ostream* pstream__)  const
{
  return theta_spline(t, mu, theta0, pstream__);
}


class source_counts_linear_model final : public model_base_crtp<source_counts_linear_model> {

 private:
  int numObs;
  std::vector<int> Time;
  int numPred;
  std::vector<int> ts_pred;
  std::vector<double> counts;
  std::vector<double> y; 
  
 
 public:
  ~source_counts_linear_model() { }
  
  inline std::string model_name() const final { return "source_counts_linear_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 4fa29e29", "stancflags = "};
  }
  
  
  source_counts_linear_model(stan::io::var_context& context__,
                             unsigned int random_seed__ = 0,
                             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "source_counts_linear_model_namespace::source_counts_linear_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 19;
      context__.validate_dims("data initialization","numObs","int",
           std::vector<size_t>{});
      numObs = std::numeric_limits<int>::min();
      
      
      current_statement__ = 19;
      numObs = context__.vals_i("numObs")[(1 - 1)];
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "numObs", numObs, 1);
      current_statement__ = 20;
      stan::math::validate_non_negative_index("Time", "numObs", numObs);
      current_statement__ = 21;
      context__.validate_dims("data initialization","Time","int",
           std::vector<size_t>{static_cast<size_t>(numObs)});
      Time = std::vector<int>(numObs, std::numeric_limits<int>::min());
      
      
      current_statement__ = 21;
      Time = context__.vals_i("Time");
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "Time", Time, 0);
      current_statement__ = 22;
      context__.validate_dims("data initialization","numPred","int",
           std::vector<size_t>{});
      numPred = std::numeric_limits<int>::min();
      
      
      current_statement__ = 22;
      numPred = context__.vals_i("numPred")[(1 - 1)];
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "numPred", numPred, 1);
      current_statement__ = 23;
      stan::math::validate_non_negative_index("ts_pred", "numPred", numPred);
      current_statement__ = 24;
      context__.validate_dims("data initialization","ts_pred","int",
           std::vector<size_t>{static_cast<size_t>(numPred)});
      ts_pred = std::vector<int>(numPred, std::numeric_limits<int>::min());
      
      
      current_statement__ = 24;
      ts_pred = context__.vals_i("ts_pred");
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "ts_pred", ts_pred, 0);
      current_statement__ = 25;
      stan::math::validate_non_negative_index("counts", "numObs", numObs);
      current_statement__ = 26;
      context__.validate_dims("data initialization","counts","double",
           std::vector<size_t>{static_cast<size_t>(numObs)});
      counts = 
        std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 26;
      counts = context__.vals_r("counts");
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "counts", counts, 0);
      current_statement__ = 27;
      stan::math::validate_non_negative_index("y", "numObs", numObs);
      current_statement__ = 28;
      y = 
        std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 29;
      stan::model::assign(y, stan::math::log(counts), "assigning variable y");
      current_statement__ = 30;
      stan::math::validate_non_negative_index("ymean", "numObs", numObs);
      current_statement__ = 31;
      stan::math::validate_non_negative_index("ymean_pred", "numPred",
                                              numPred);
      current_statement__ = 32;
      stan::math::validate_non_negative_index("countspred", "numPred",
                                              numPred);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "source_counts_linear_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ y0Log = DUMMY_VAR__;
      current_statement__ = 1;
      y0Log = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 2;
      mu = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      std::vector<local_scalar_t__> ymean =
         std::vector<local_scalar_t__>(numObs, DUMMY_VAR__);
      local_scalar_t__ y0 = DUMMY_VAR__;
      current_statement__ = 5;
      y0 = stan::math::exp(y0Log);
      current_statement__ = 8;
      for (int i = 1; i <= numObs; ++i) {
        current_statement__ = 6;
        stan::model::assign(ymean,
          theta_spline(
            stan::model::rvalue(Time, "Time", stan::model::index_uni(i)), mu,
            y0, pstream__),
          "assigning variable ymean", stan::model::index_uni(i));
      }
      {
        current_statement__ = 15;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0, 1));
        current_statement__ = 16;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(y0Log, 11, 2));
        current_statement__ = 17;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma, 0.5, 2));
        current_statement__ = 18;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(y, stan::math::log(ymean), sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "source_counts_linear_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double y0Log = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      y0Log = in__.template read<local_scalar_t__>();
      double mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      mu = in__.template read<local_scalar_t__>();
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      std::vector<double> ymean =
         std::vector<double>(numObs, 
           std::numeric_limits<double>::quiet_NaN());
      double y0 = std::numeric_limits<double>::quiet_NaN();
      out__.write(y0Log);
      out__.write(mu);
      out__.write(sigma);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 5;
      y0 = stan::math::exp(y0Log);
      current_statement__ = 8;
      for (int i = 1; i <= numObs; ++i) {
        current_statement__ = 6;
        stan::model::assign(ymean,
          theta_spline(
            stan::model::rvalue(Time, "Time", stan::model::index_uni(i)), mu,
            y0, pstream__),
          "assigning variable ymean", stan::model::index_uni(i));
      }
      if (emit_transformed_parameters__) {
        out__.write(ymean);
        out__.write(y0);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> ymean_pred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> countspred =
         std::vector<double>(numPred, 
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 14;
      for (int i = 1; i <= numPred; ++i) {
        current_statement__ = 11;
        stan::model::assign(ymean_pred,
          theta_spline(
            stan::model::rvalue(ts_pred, "ts_pred",
              stan::model::index_uni(i)), mu, y0, pstream__),
          "assigning variable ymean_pred", stan::model::index_uni(i));
        current_statement__ = 12;
        stan::model::assign(countspred,
          stan::math::exp(
            stan::math::normal_rng(
              stan::math::log(
                stan::model::rvalue(ymean_pred, "ymean_pred",
                  stan::model::index_uni(i))), sigma, base_rng__)),
          "assigning variable countspred", stan::model::index_uni(i));
      }
      out__.write(ymean_pred);
      out__.write(countspred);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ y0Log = DUMMY_VAR__;
      y0Log = in__.read<local_scalar_t__>();
      out__.write(y0Log);
      local_scalar_t__ mu = DUMMY_VAR__;
      mu = in__.read<local_scalar_t__>();
      out__.write(mu);
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"y0Log", "mu", "sigma", "ymean", "y0",
      "ymean_pred", "countspred"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(numObs)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(numPred)},
      std::vector<size_t>{static_cast<size_t>(numPred)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "y0Log");
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ymean" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "y0");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ymean_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "countspred" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "y0Log");
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ymean" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "y0");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ymean_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "countspred" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"y0Log\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ymean\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numObs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"ymean_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"countspred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"y0Log\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ymean\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numObs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"ymean_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"countspred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(numPred) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((1 + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  (numObs + 1);
      const size_t num_gen_quantities = emit_generated_quantities * 
  (numPred + numPred);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((1 + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  (numObs + 1);
      const size_t num_gen_quantities = emit_generated_quantities * 
  (numPred + numPred);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 3> names__{"y0Log", "mu", "sigma"};
      const std::array<Eigen::Index, 3> constrain_param_sizes__{1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = source_counts_linear_model_namespace::source_counts_linear_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return source_counts_linear_model_namespace::profiles__;
}

#endif


