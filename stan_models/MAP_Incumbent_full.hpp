
// Code generated by stanc a7f4b745
#include <stan/model/model_header.hpp>
namespace MAP_Incumbent_full_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 627> locations_array__ = 
{" (found before start of program)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 402, column 2 to column 31)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 403, column 2 to column 33)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 404, column 2 to column 33)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 405, column 2 to column 36)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 406, column 2 to column 33)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 407, column 2 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 408, column 2 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 409, column 2 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 410, column 2 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 411, column 2 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 412, column 2 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 413, column 2 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 414, column 2 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 415, column 2 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 418, column 2 to column 33)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 419, column 2 to column 33)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 420, column 2 to column 30)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 421, column 2 to column 30)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 422, column 2 to column 35)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 423, column 2 to column 35)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 424, column 2 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 425, column 2 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 429, column 2 to column 27)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 430, column 2 to column 35)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 431, column 2 to column 35)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 432, column 2 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 433, column 2 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 434, column 2 to column 36)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 435, column 2 to column 36)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 436, column 2 to column 37)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 437, column 2 to column 37)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 438, column 2 to column 35)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 440, column 2 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 441, column 2 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 442, column 2 to column 31)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 443, column 2 to column 31)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 444, column 2 to column 35)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 445, column 2 to column 35)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 446, column 2 to column 36)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 447, column 2 to column 36)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 449, column 2 to column 25)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 450, column 2 to column 27)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 451, column 2 to column 27)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 452, column 2 to column 30)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 453, column 2 to column 27)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 454, column 2 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 455, column 2 to column 31)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 456, column 2 to column 31)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 457, column 2 to column 31)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 458, column 2 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 459, column 2 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 460, column 2 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 461, column 2 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 462, column 2 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 465, column 2 to column 80)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 468, column 4 to column 52)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 469, column 4 to column 52)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 470, column 4 to column 52)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 471, column 4 to column 52)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 472, column 4 to column 52)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 473, column 4 to column 52)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 474, column 4 to column 52)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 475, column 4 to column 48)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 467, column 22 to line 476, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 467, column 2 to line 476, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 479, column 4 to column 66)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 480, column 4 to column 66)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 478, column 22 to line 481, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 478, column 2 to line 481, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 483, column 4 to column 57)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 484, column 4 to column 57)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 482, column 22 to line 485, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 482, column 2 to line 485, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 487, column 4 to column 71)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 488, column 4 to column 71)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 486, column 22 to line 489, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 486, column 2 to line 489, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 491, column 4 to column 68)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 492, column 4 to column 68)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 490, column 22 to line 493, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 490, column 2 to line 493, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 532, column 2 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 533, column 2 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 534, column 2 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 535, column 2 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 537, column 2 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 538, column 2 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 539, column 2 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 540, column 2 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 542, column 2 to column 38)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 542, column 40 to column 76)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 543, column 2 to column 38)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 543, column 40 to column 76)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 544, column 2 to column 38)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 544, column 40 to column 76)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 545, column 2 to column 38)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 545, column 40 to column 76)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 547, column 2 to column 35)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 547, column 37 to column 70)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 548, column 2 to column 35)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 548, column 37 to column 70)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 549, column 2 to column 35)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 549, column 37 to column 70)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 550, column 2 to column 35)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 550, column 37 to column 70)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 552, column 2 to column 40)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 552, column 41 to column 79)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 553, column 2 to column 40)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 553, column 41 to column 79)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 554, column 2 to column 40)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 554, column 41 to column 79)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 555, column 2 to column 40)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 555, column 41 to column 79)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 557, column 2 to column 39)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 557, column 40 to column 77)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 558, column 2 to column 39)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 558, column 40 to column 77)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 559, column 2 to column 39)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 559, column 40 to column 77)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 560, column 2 to column 39)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 560, column 40 to column 77)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 563, column 2 to column 37)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 564, column 2 to column 37)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 565, column 2 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 566, column 2 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 567, column 2 to column 39)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 568, column 2 to column 39)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 569, column 2 to column 38)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 570, column 2 to column 38)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 573, column 2 to column 21)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 574, column 2 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 576, column 2 to column 40)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 576, column 41 to column 79)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 577, column 2 to column 40)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 577, column 41 to column 79)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 578, column 2 to column 20)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 578, column 21 to column 39)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 580, column 2 to column 28)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 580, column 29 to column 55)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 580, column 56 to column 82)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 580, column 83 to column 109)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 581, column 2 to column 28)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 581, column 29 to column 55)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 581, column 56 to column 82)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 581, column 83 to column 109)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 582, column 2 to column 21)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 582, column 22 to column 41)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 582, column 42 to column 61)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 582, column 62 to column 81)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 585, column 2 to column 94)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 586, column 2 to column 94)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 587, column 2 to column 94)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 588, column 2 to column 94)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 590, column 2 to column 91)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 591, column 2 to column 91)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 592, column 2 to column 91)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 593, column 2 to column 91)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 596, column 4 to column 98)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 597, column 4 to column 98)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 598, column 4 to column 98)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 599, column 4 to column 98)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 601, column 4 to column 98)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 602, column 4 to column 98)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 603, column 4 to column 98)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 604, column 4 to column 98)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 606, column 4 to column 136)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 607, column 4 to column 136)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 608, column 4 to column 136)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 609, column 4 to column 136)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 611, column 4 to column 137)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 612, column 4 to column 137)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 613, column 4 to column 137)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 614, column 4 to column 137)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 616, column 4 to column 94)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 617, column 4 to column 94)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 618, column 4 to column 94)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 619, column 4 to column 94)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 621, column 4 to column 96)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 622, column 4 to column 96)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 623, column 4 to column 96)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 624, column 4 to column 96)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 626, column 4 to column 152)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 627, column 4 to column 152)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 628, column 4 to column 152)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 629, column 4 to column 152)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 631, column 4 to column 152)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 632, column 4 to column 152)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 633, column 4 to column 152)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 634, column 4 to column 152)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 595, column 22 to line 636, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 595, column 2 to line 636, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 640, column 4 to column 104)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 641, column 4 to column 104)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 639, column 23 to line 642, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 639, column 2 to line 642, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 644, column 4 to column 112)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 645, column 4 to column 112)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 643, column 23 to line 646, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 643, column 2 to line 646, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 648, column 4 to column 132)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 649, column 4 to column 132)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 647, column 23 to line 650, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 647, column 2 to line 650, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 652, column 4 to column 128)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 653, column 4 to column 128)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 651, column 23 to line 654, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 651, column 2 to line 654, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 497, column 2 to column 25)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 498, column 2 to column 30)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 499, column 2 to column 28)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 500, column 2 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 501, column 2 to column 29)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 502, column 2 to column 28)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 503, column 2 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 504, column 2 to column 25)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 505, column 2 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 506, column 2 to column 25)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 507, column 2 to column 25)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 508, column 2 to column 25)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 509, column 2 to column 25)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 510, column 2 to column 25)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 512, column 2 to column 38)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 513, column 2 to column 38)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 514, column 2 to column 35)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 515, column 2 to column 35)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 516, column 2 to column 40)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 517, column 2 to column 40)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 518, column 2 to column 37)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 519, column 2 to column 37)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 521, column 2 to column 67)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 522, column 2 to column 67)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 523, column 2 to column 93)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 524, column 2 to column 93)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 525, column 2 to column 108)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 526, column 2 to column 108)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 527, column 2 to column 105)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 528, column 2 to column 105)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 352, column 3 to column 15)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 353, column 3 to column 15)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 354, column 3 to column 15)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 355, column 3 to column 15)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 356, column 3 to column 15)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 357, column 3 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 358, column 3 to column 15)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 359, column 18 to column 25)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 359, column 3 to column 27)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 360, column 16 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 360, column 3 to column 25)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 361, column 13 to column 20)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 361, column 3 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 362, column 25 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 362, column 3 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 363, column 22 to column 29)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 363, column 3 to column 31)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 364, column 26 to column 33)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 364, column 3 to column 35)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 365, column 25 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 365, column 3 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 366, column 19 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 366, column 3 to column 28)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 367, column 19 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 367, column 3 to column 28)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 368, column 16 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 368, column 3 to column 25)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 369, column 16 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 369, column 3 to column 25)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 370, column 21 to column 28)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 370, column 3 to column 30)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 371, column 21 to column 28)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 371, column 3 to column 30)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 372, column 20 to column 27)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 372, column 3 to column 29)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 373, column 20 to column 27)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 373, column 3 to column 29)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 374, column 17 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 374, column 3 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 375, column 17 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 375, column 3 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 376, column 17 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 376, column 3 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 377, column 17 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 377, column 3 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 378, column 17 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 378, column 3 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 379, column 17 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 379, column 3 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 380, column 17 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 380, column 3 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 381, column 17 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 381, column 3 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 385, column 3 to column 28)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 386, column 11 to column 19)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 386, column 21 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 386, column 3 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 387, column 12 to column 20)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 387, column 22 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 387, column 3 to column 25)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 390, column 26 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 390, column 3 to column 36)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 394, column 5 to column 27)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 395, column 5 to column 19)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 396, column 5 to column 33)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 397, column 5 to column 35)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 393, column 25 to line 398, column 4)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 393, column 3 to line 398, column 4)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 430, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 431, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 432, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 433, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 434, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 435, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 436, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 437, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 438, column 9 to column 18)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 440, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 441, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 442, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 443, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 444, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 445, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 446, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 447, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 532, column 22 to column 29)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 533, column 22 to column 29)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 534, column 22 to column 29)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 535, column 22 to column 29)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 537, column 19 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 538, column 19 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 539, column 19 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 540, column 19 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 542, column 29 to column 36)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 542, column 67 to column 74)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 543, column 29 to column 36)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 543, column 67 to column 74)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 544, column 29 to column 36)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 544, column 67 to column 74)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 545, column 29 to column 36)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 545, column 67 to column 74)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 547, column 26 to column 33)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 547, column 61 to column 68)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 548, column 26 to column 33)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 548, column 61 to column 68)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 549, column 26 to column 33)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 549, column 61 to column 68)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 550, column 26 to column 33)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 550, column 61 to column 68)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 552, column 31 to column 38)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 552, column 70 to column 77)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 553, column 31 to column 38)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 553, column 70 to column 77)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 554, column 31 to column 38)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 554, column 70 to column 77)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 555, column 31 to column 38)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 555, column 70 to column 77)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 557, column 30 to column 37)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 557, column 68 to column 75)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 558, column 30 to column 37)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 558, column 68 to column 75)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 559, column 30 to column 37)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 559, column 68 to column 75)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 560, column 30 to column 37)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 560, column 68 to column 75)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 563, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 564, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 565, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 566, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 567, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 568, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 569, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 570, column 9 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 5, column 3 to column 18)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 6, column 3 to column 14)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 8, column 3 to column 28)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 8, column 30 to column 53)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 10, column 3 to column 44)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 11, column 3 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 4, column 28 to line 12, column 2)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 17, column 3 to column 39)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 18, column 3 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 15, column 39 to line 19, column 2)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 26, column 3 to column 14)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 26, column 16 to column 41)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 26, column 44 to column 67)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 30, column 5 to column 53)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 29, column 10 to line 31, column 4)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 28, column 5 to column 15)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 27, column 21 to line 29, column 4)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 27, column 3 to line 31, column 4)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 32, column 3 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 22, column 28 to line 33, column 2)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 38, column 3 to column 18)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 40, column 2 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 40, column 27 to column 51)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 41, column 2 to column 13)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 37, column 33 to line 42, column 1)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 46, column 2 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 47, column 2 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 48, column 2 to column 27)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 49, column 2 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 51, column 2 to column 15)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 52, column 2 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 55, column 2 to column 27)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 56, column 2 to column 20)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 61, column 2 to column 113)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 63, column 2 to column 52)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 65, column 2 to column 52)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 67, column 2 to column 52)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 71, column 2 to column 108)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 73, column 2 to column 52)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 75, column 2 to column 14)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 45, column 81 to line 76, column 1)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 84, column 4 to column 17)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 85, column 4 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 86, column 4 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 88, column 4 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 89, column 4 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 91, column 4 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 95, column 6 to column 126)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 94, column 11 to line 96, column 5)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 93, column 6 to column 28)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 92, column 22 to line 94, column 5)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 92, column 4 to line 96, column 5)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 97, column 4 to column 21)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 82, column 15 to line 98, column 1)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 101, column 5 to column 21)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 102, column 4 to column 19)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 104, column 4 to column 15)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 105, column 4 to column 20)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 108, column 4 to column 49)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 111, column 4 to column 31)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 112, column 4 to column 31)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 113, column 4 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 114, column 4 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 115, column 4 to column 21)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 116, column 4 to column 21)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 118, column 4 to column 29)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 119, column 4 to column 25)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 121, column 4 to column 123)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 123, column 4 to column 19)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 100, column 81 to line 124, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 127, column 4 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 128, column 17 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 128, column 4 to column 28)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 130, column 6 to column 76)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 129, column 24 to line 131, column 5)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 129, column 4 to line 131, column 5)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 132, column 4 to column 19)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 126, column 91 to line 133, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 137, column 2 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 138, column 2 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 139, column 2 to column 27)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 140, column 2 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 141, column 2 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 142, column 2 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 144, column 2 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 145, column 2 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 146, column 2 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 149, column 2 to column 27)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 150, column 2 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 156, column 2 to column 159)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 158, column 2 to column 153)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 160, column 2 to column 87)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 162, column 2 to column 74)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 164, column 2 to column 85)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 166, column 2 to column 72)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 168, column 2 to column 85)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 170, column 2 to column 72)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 175, column 2 to column 171)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 177, column 2 to column 165)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 179, column 2 to column 91)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 181, column 2 to column 78)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 182, column 2 to column 14)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 136, column 78 to line 183, column 1)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 191, column 4 to column 17)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 192, column 4 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 193, column 4 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 195, column 4 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 196, column 4 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 198, column 4 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 199, column 4 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 203, column 6 to column 123)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 202, column 11 to line 204, column 5)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 201, column 6 to column 28)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 200, column 22 to line 202, column 5)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 200, column 4 to line 204, column 5)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 205, column 4 to column 21)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 189, column 15 to line 206, column 1)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 209, column 5 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 210, column 4 to column 19)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 212, column 4 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 213, column 4 to column 21)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 216, column 4 to column 49)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 219, column 4 to column 31)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 220, column 4 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 221, column 4 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 222, column 4 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 223, column 4 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 224, column 4 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 225, column 4 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 226, column 4 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 227, column 4 to column 21)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 228, column 4 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 229, column 4 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 230, column 4 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 232, column 4 to column 29)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 233, column 4 to column 25)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 235, column 4 to column 120)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 237, column 4 to column 19)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 208, column 81 to line 238, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 241, column 4 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 242, column 17 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 242, column 4 to column 29)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 244, column 6 to column 76)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 243, column 24 to line 245, column 5)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 243, column 4 to line 245, column 5)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 246, column 4 to column 19)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 240, column 91 to line 247, column 3)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 251, column 4 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 252, column 20 to column 21)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 252, column 4 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 253, column 17 to column 18)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 253, column 4 to column 31)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 254, column 17 to column 18)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 254, column 4 to column 20)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 257, column 4 to column 33)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 257, column 34 to column 63)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 257, column 65 to column 94)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 258, column 4 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 258, column 35 to column 65)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 258, column 66 to column 96)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 259, column 4 to column 34)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 259, column 35 to column 65)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 261, column 4 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 262, column 4 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 265, column 22 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 265, column 4 to column 28)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 266, column 19 to column 20)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 266, column 4 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 268, column 20 to column 21)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 268, column 4 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 268, column 40 to column 41)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 268, column 24 to column 43)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 268, column 66 to column 67)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 268, column 44 to column 69)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 268, column 92 to column 93)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 268, column 70 to column 95)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 269, column 25 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 269, column 4 to column 28)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 269, column 50 to column 51)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 269, column 29 to column 53)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 269, column 72 to column 73)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 269, column 54 to column 75)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 269, column 94 to column 95)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 269, column 76 to column 97)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 270, column 21 to column 22)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 270, column 4 to column 24)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 270, column 42 to column 43)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 270, column 25 to column 45)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 272, column 11 to column 14)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 272, column 4 to column 31)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 275, column 4 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 275, column 33 to column 61)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 275, column 62 to column 90)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 276, column 4 to column 32)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 276, column 33 to column 51)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 276, column 52 to column 70)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 278, column 4 to column 25)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 278, column 26 to column 47)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 278, column 48 to column 69)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 278, column 70 to column 91)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 279, column 4 to column 25)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 279, column 26 to column 47)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 279, column 48 to column 69)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 279, column 70 to column 91)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 280, column 4 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 280, column 24 to column 43)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 280, column 44 to column 63)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 280, column 64 to column 83)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 283, column 6 to column 35)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 282, column 18 to line 284, column 5)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 282, column 4 to line 284, column 5)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 288, column 6 to column 97)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 289, column 6 to column 94)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 292, column 8 to column 85)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 293, column 8 to column 85)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 294, column 8 to column 65)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 295, column 8 to column 66)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 296, column 8 to column 99)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 297, column 8 to column 99)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 298, column 8 to column 64)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 299, column 8 to column 65)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 300, column 8 to column 80)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 301, column 8 to column 80)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 303, column 8 to column 48)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 304, column 8 to column 48)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 305, column 8 to column 111)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 306, column 8 to column 111)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 307, column 8 to column 49)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 308, column 8 to column 49)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 309, column 8 to column 50)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 310, column 8 to column 50)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 291, column 20 to line 311, column 7)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 291, column 6 to line 311, column 7)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 313, column 6 to column 28)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 249, column 86 to line 314, column 5)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 318, column 7 to column 16)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 319, column 9 to column 33)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 320, column 9 to column 20)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 317, column 30 to line 321, column 5)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 325, column 6 to column 26)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 326, column 18 to column 23)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 326, column 6 to column 25)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 327, column 6 to column 19)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 330, column 8 to column 45)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 329, column 25 to line 331, column 7)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 329, column 6 to line 331, column 7)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 332, column 6 to column 20)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 324, column 35 to line 333, column 5)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 336, column 6 to column 19)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 338, column 6 to column 42)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 339, column 6 to column 20)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 335, column 30 to line 340, column 5)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 343, column 6 to column 19)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 345, column 6 to column 35)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 346, column 6 to column 20)",
 " (in 'Treg_dynamics/stan_models/MAP_Incumbent_full.stan', line 342, column 29 to line 347, column 5)"};


template <typename T0__>
stan::promote_args_t<T0__>
sp_numbers(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 371;
    t0 = 49.0;
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ basl;
    basl = DUMMY_VAR__;
    
    current_statement__ = 373;
    basl = 6.407133491;
    local_scalar_t__ nu;
    nu = DUMMY_VAR__;
    
    current_statement__ = 374;
    nu = 0.002387866;
    current_statement__ = 375;
    value = (pow(10, basl) * stan::math::exp((-nu * (time - t0))));
    current_statement__ = 376;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sp_numbers_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return sp_numbers(time, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
theta_spline(const T0__& time, const T1__& psi, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    current_statement__ = 378;
    value = (psi * sp_numbers(time, pstream__));
    current_statement__ = 379;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct theta_spline_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& time, const T1__& psi, std::ostream* pstream__)  const 
{
return theta_spline(time, psi, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
Chi_spline(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ value;
    value = DUMMY_VAR__;
    
    local_scalar_t__ chiEst;
    chiEst = DUMMY_VAR__;
    
    current_statement__ = 382;
    chiEst = 0.81548689;
    local_scalar_t__ qEst;
    qEst = DUMMY_VAR__;
    
    current_statement__ = 383;
    qEst = 0.06286984;
    current_statement__ = 388;
    if (logical_lt((time - 10), 0)) {
      current_statement__ = 386;
      value = 0;
    } else {
      current_statement__ = 384;
      value = (chiEst * (1 - stan::math::exp((-qEst * (time - 10)))));
    }
    current_statement__ = 389;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Chi_spline_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return Chi_spline(time, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
donor_eps_spline(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 391;
    t0 = 49.0;
    local_scalar_t__ eps_0;
    eps_0 = DUMMY_VAR__;
    
    current_statement__ = 392;
    eps_0 = 0.37848471;
    local_scalar_t__ eps_f;
    eps_f = DUMMY_VAR__;
    
    current_statement__ = 393;
    eps_f = 0.06799028;
    current_statement__ = 394;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct donor_eps_spline_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return donor_eps_spline(time, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
shm_simple(const T0__& time, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& rdata,
           const std::vector<int>& idata, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ psi;
    psi = DUMMY_VAR__;
    
    current_statement__ = 396;
    psi = rvalue(parms, "parms", index_uni(1));
    local_scalar_t__ alpha;
    alpha = DUMMY_VAR__;
    
    current_statement__ = 397;
    alpha = rvalue(parms, "parms", index_uni(2));
    local_scalar_t__ lambda_D;
    lambda_D = DUMMY_VAR__;
    
    current_statement__ = 398;
    lambda_D = rvalue(parms, "parms", index_uni(3));
    local_scalar_t__ Beta;
    Beta = DUMMY_VAR__;
    
    current_statement__ = 399;
    Beta = rvalue(parms, "parms", index_uni(4));
    std::vector<local_scalar_t__> dydt;
    dydt = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    local_scalar_t__ kloss;
    kloss = DUMMY_VAR__;
    
    current_statement__ = 401;
    kloss = (1 / 3.5);
    local_scalar_t__ ageAtBMT;
    ageAtBMT = DUMMY_VAR__;
    
    current_statement__ = 402;
    ageAtBMT = rvalue(parms, "parms", index_uni(6));
    local_scalar_t__ lambda_I;
    lambda_I = DUMMY_VAR__;
    
    current_statement__ = 403;
    lambda_I = 0;
    current_statement__ = 404;
    assign(dydt,
      (((theta_spline(time, psi, pstream__) *
          (1 - Chi_spline((time - ageAtBMT), pstream__))) +
         (Beta * rvalue(y, "y", index_uni(2)))) -
        ((alpha + lambda_D) * rvalue(y, "y", index_uni(1)))),
      "assigning variable dydt", index_uni(1));
    current_statement__ = 405;
    assign(dydt,
      ((alpha * rvalue(y, "y", index_uni(1))) -
        ((Beta + lambda_D) * rvalue(y, "y", index_uni(2)))),
      "assigning variable dydt", index_uni(2));
    current_statement__ = 406;
    assign(dydt,
      ((alpha * rvalue(y, "y", index_uni(4))) -
        ((Beta + lambda_I) * rvalue(y, "y", index_uni(3)))),
      "assigning variable dydt", index_uni(3));
    current_statement__ = 407;
    assign(dydt,
      ((Beta * rvalue(y, "y", index_uni(3))) -
        ((alpha + lambda_I) * rvalue(y, "y", index_uni(4)))),
      "assigning variable dydt", index_uni(4));
    current_statement__ = 408;
    assign(dydt,
      (((theta_spline(time, psi, pstream__) *
          Chi_spline((time - ageAtBMT), pstream__)) +
         (Beta * rvalue(y, "y", index_uni(6)))) -
        ((alpha + lambda_D) * rvalue(y, "y", index_uni(5)))),
      "assigning variable dydt", index_uni(5));
    current_statement__ = 409;
    assign(dydt,
      ((alpha * rvalue(y, "y", index_uni(5))) -
        ((Beta + lambda_D) * rvalue(y, "y", index_uni(6)))),
      "assigning variable dydt", index_uni(6));
    current_statement__ = 410;
    return dydt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct shm_simple_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& time, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& rdata,
           const std::vector<int>& idata, std::ostream* pstream__)  const 
{
return shm_simple(time, y, parms, rdata, idata, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
solve_init1(const T0__& ageAtBMT, const std::vector<T1__>& init_cond,
            const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ ta;
    ta = DUMMY_VAR__;
    
    current_statement__ = 412;
    ta = 40;
    std::vector<std::vector<local_scalar_t__>> y_init;
    y_init = std::vector<std::vector<local_scalar_t__>>(2, std::vector<local_scalar_t__>(6, DUMMY_VAR__));
    
    std::vector<local_scalar_t__> params_init;
    params_init = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    current_statement__ = 415;
    assign(params_init, rvalue(parms, "parms", index_min_max(1, 5)),
      "assigning variable params_init", index_min_max(1, 5));
    current_statement__ = 416;
    assign(params_init, ta, "assigning variable params_init", index_uni(6));
    current_statement__ = 417;
    assign(y_init, init_cond, "assigning variable y_init", index_uni(1));
    current_statement__ = 422;
    if (logical_eq(ageAtBMT, 40)) {
      current_statement__ = 420;
      assign(y_init, init_cond, "assigning variable y_init", index_uni(2));
    } else {
      current_statement__ = 418;
      assign(y_init,
        to_array_1d(
          integrate_ode_rk45(shm_simple_functor__(), init_cond, ta,
            rep_array(ageAtBMT, 1), params_init, std::vector<double>{0.0},
            std::vector<int>{0}, pstream__)),
        "assigning variable y_init", index_uni(2));
    }
    current_statement__ = 423;
    return rvalue(y_init, "y_init", index_uni(2));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_init1_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
operator()(const T0__& ageAtBMT, const std::vector<T1__>& init_cond,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return solve_init1(ageAtBMT, init_cond, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
solve_chi1(const T0__& solve_time, const T1__& ageAtBMT,
           const std::vector<T2__>& init_cond,
           const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> y0;
    y0 = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> init_tb;
    init_tb = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    current_statement__ = 429;
    assign(y0, solve_init1(ageAtBMT, init_cond, parms, pstream__),
      "assigning variable y0");
    current_statement__ = 430;
    assign(init_tb,
      (rvalue(y0, "y0", index_uni(1)) + rvalue(y0, "y0", index_uni(5))),
      "assigning variable init_tb", index_uni(1));
    current_statement__ = 431;
    assign(init_tb,
      (rvalue(y0, "y0", index_uni(2)) + rvalue(y0, "y0", index_uni(6))),
      "assigning variable init_tb", index_uni(2));
    current_statement__ = 432;
    assign(init_tb, rvalue(y0, "y0", index_uni(3)),
      "assigning variable init_tb", index_uni(3));
    current_statement__ = 433;
    assign(init_tb, rvalue(y0, "y0", index_uni(4)),
      "assigning variable init_tb", index_uni(4));
    current_statement__ = 434;
    assign(init_tb, 0.0, "assigning variable init_tb", index_uni(5));
    current_statement__ = 435;
    assign(init_tb, 0.0, "assigning variable init_tb", index_uni(6));
    current_statement__ = 436;
    assign(params, rvalue(parms, "parms", index_min_max(1, 5)),
      "assigning variable params", index_min_max(1, 5));
    current_statement__ = 437;
    assign(params, ageAtBMT, "assigning variable params", index_uni(6));
    current_statement__ = 438;
    assign(y_solve,
      to_array_1d(
        integrate_ode_rk45(shm_simple_functor__(), init_tb, ageAtBMT,
          rep_array(solve_time, 1), params, std::vector<double>{0.0},
          std::vector<int>{0}, pstream__)), "assigning variable y_solve");
    current_statement__ = 439;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_chi1_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& solve_time, const T1__& ageAtBMT,
           const std::vector<T2__>& init_cond,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return solve_chi1(solve_time, ageAtBMT, init_cond, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>>
solve_ode_chi1(const std::vector<T0__>& solve_time,
               const std::vector<T1__>& ageAtBMT,
               const std::vector<T2__>& init_cond,
               const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int numdim;
    numdim = std::numeric_limits<int>::min();
    
    current_statement__ = 441;
    numdim = size(solve_time);
    current_statement__ = 442;
    validate_non_negative_index("y_solve", "numdim", numdim);
    std::vector<std::vector<local_scalar_t__>> y_solve;
    y_solve = std::vector<std::vector<local_scalar_t__>>(numdim, std::vector<local_scalar_t__>(6, DUMMY_VAR__));
    
    current_statement__ = 446;
    for (int i = 1; i <= numdim; ++i) {
      current_statement__ = 444;
      assign(y_solve,
        solve_chi1(rvalue(solve_time, "solve_time", index_uni(i)),
          rvalue(ageAtBMT, "ageAtBMT", index_uni(i)), init_cond,
          parms, pstream__), "assigning variable y_solve", index_uni(i));}
    current_statement__ = 447;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_ode_chi1_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>>
operator()(const std::vector<T0__>& solve_time,
           const std::vector<T1__>& ageAtBMT,
           const std::vector<T2__>& init_cond,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return solve_ode_chi1(solve_time, ageAtBMT, init_cond, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
shm_chi(const T0__& time, const std::vector<T1__>& y,
        const std::vector<T2__>& parms, const std::vector<T3__>& rdata,
        const std::vector<int>& idata, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ psi;
    psi = DUMMY_VAR__;
    
    current_statement__ = 449;
    psi = rvalue(parms, "parms", index_uni(1));
    local_scalar_t__ alpha;
    alpha = DUMMY_VAR__;
    
    current_statement__ = 450;
    alpha = rvalue(parms, "parms", index_uni(2));
    local_scalar_t__ lambda_D;
    lambda_D = DUMMY_VAR__;
    
    current_statement__ = 451;
    lambda_D = rvalue(parms, "parms", index_uni(3));
    local_scalar_t__ Beta;
    Beta = DUMMY_VAR__;
    
    current_statement__ = 452;
    Beta = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ rho_D;
    rho_D = DUMMY_VAR__;
    
    current_statement__ = 453;
    rho_D = rvalue(parms, "parms", index_uni(5));
    local_scalar_t__ rho_I;
    rho_I = DUMMY_VAR__;
    
    current_statement__ = 454;
    rho_I = rvalue(parms, "parms", index_uni(6));
    std::vector<local_scalar_t__> dydt;
    dydt = std::vector<local_scalar_t__>(12, DUMMY_VAR__);
    
    local_scalar_t__ kloss;
    kloss = DUMMY_VAR__;
    
    current_statement__ = 456;
    kloss = (1 / 3.5);
    local_scalar_t__ eps_host;
    eps_host = DUMMY_VAR__;
    
    current_statement__ = 457;
    eps_host = 0.0;
    local_scalar_t__ ageAtBMT;
    ageAtBMT = DUMMY_VAR__;
    
    current_statement__ = 458;
    ageAtBMT = rvalue(parms, "parms", index_uni(7));
    local_scalar_t__ delta_D;
    delta_D = DUMMY_VAR__;
    
    current_statement__ = 459;
    delta_D = (lambda_D + rho_D);
    current_statement__ = 460;
    assign(dydt,
      (((((theta_spline(time, psi, pstream__) *
            (1 - Chi_spline((time - ageAtBMT), pstream__))) * eps_host) +
          (rho_D *
            ((2 * rvalue(y, "y", index_uni(2))) +
              rvalue(y, "y", index_uni(1))))) +
         (Beta * rvalue(y, "y", index_uni(3)))) -
        (((kloss + alpha) + delta_D) * rvalue(y, "y", index_uni(1)))),
      "assigning variable dydt", index_uni(1));
    current_statement__ = 461;
    assign(dydt,
      (((((theta_spline(time, psi, pstream__) *
            (1 - Chi_spline((time - ageAtBMT), pstream__))) * (1 - eps_host))
          + (kloss * rvalue(y, "y", index_uni(1)))) +
         (Beta * rvalue(y, "y", index_uni(4)))) -
        (((rho_D + alpha) + delta_D) * rvalue(y, "y", index_uni(2)))),
      "assigning variable dydt", index_uni(2));
    current_statement__ = 462;
    assign(dydt,
      (((alpha * rvalue(y, "y", index_uni(1))) +
         (rho_D *
           ((2 * rvalue(y, "y", index_uni(4))) +
             rvalue(y, "y", index_uni(3))))) -
        (((kloss + Beta) + delta_D) * rvalue(y, "y", index_uni(3)))),
      "assigning variable dydt", index_uni(3));
    current_statement__ = 463;
    assign(dydt,
      (((alpha * rvalue(y, "y", index_uni(2))) +
         (kloss * rvalue(y, "y", index_uni(3)))) -
        (((rho_D + Beta) + delta_D) * rvalue(y, "y", index_uni(4)))),
      "assigning variable dydt", index_uni(4));
    current_statement__ = 464;
    assign(dydt,
      (((alpha * rvalue(y, "y", index_uni(7))) +
         (rho_I *
           ((2 * rvalue(y, "y", index_uni(6))) +
             rvalue(y, "y", index_uni(5))))) -
        (((kloss + Beta) + rho_I) * rvalue(y, "y", index_uni(5)))),
      "assigning variable dydt", index_uni(5));
    current_statement__ = 465;
    assign(dydt,
      (((alpha * rvalue(y, "y", index_uni(8))) +
         (kloss * rvalue(y, "y", index_uni(5)))) -
        (((rho_I + Beta) + rho_I) * rvalue(y, "y", index_uni(6)))),
      "assigning variable dydt", index_uni(6));
    current_statement__ = 466;
    assign(dydt,
      (((Beta * rvalue(y, "y", index_uni(5))) +
         (rho_I *
           ((2 * rvalue(y, "y", index_uni(8))) +
             rvalue(y, "y", index_uni(7))))) -
        (((kloss + alpha) + rho_I) * rvalue(y, "y", index_uni(7)))),
      "assigning variable dydt", index_uni(7));
    current_statement__ = 467;
    assign(dydt,
      (((Beta * rvalue(y, "y", index_uni(6))) +
         (kloss * rvalue(y, "y", index_uni(7)))) -
        (((rho_I + alpha) + rho_I) * rvalue(y, "y", index_uni(8)))),
      "assigning variable dydt", index_uni(8));
    current_statement__ = 468;
    assign(dydt,
      (((((theta_spline(time, psi, pstream__) *
            Chi_spline((time - ageAtBMT), pstream__)) *
           donor_eps_spline(time, pstream__)) +
          (rho_D *
            ((2 * rvalue(y, "y", index_uni(10))) +
              rvalue(y, "y", index_uni(9))))) +
         (Beta * rvalue(y, "y", index_uni(11)))) -
        (((kloss + alpha) + delta_D) * rvalue(y, "y", index_uni(9)))),
      "assigning variable dydt", index_uni(9));
    current_statement__ = 469;
    assign(dydt,
      (((((theta_spline(time, psi, pstream__) *
            Chi_spline((time - ageAtBMT), pstream__)) *
           (1 - donor_eps_spline(time, pstream__))) +
          (kloss * rvalue(y, "y", index_uni(9)))) +
         (Beta * rvalue(y, "y", index_uni(12)))) -
        (((rho_D + alpha) + delta_D) * rvalue(y, "y", index_uni(10)))),
      "assigning variable dydt", index_uni(10));
    current_statement__ = 470;
    assign(dydt,
      (((alpha * rvalue(y, "y", index_uni(9))) +
         (rho_D *
           ((2 * rvalue(y, "y", index_uni(12))) +
             rvalue(y, "y", index_uni(11))))) -
        (((kloss + Beta) + delta_D) * rvalue(y, "y", index_uni(11)))),
      "assigning variable dydt", index_uni(11));
    current_statement__ = 471;
    assign(dydt,
      (((alpha * rvalue(y, "y", index_uni(10))) +
         (kloss * rvalue(y, "y", index_uni(11)))) -
        (((rho_D + Beta) + delta_D) * rvalue(y, "y", index_uni(12)))),
      "assigning variable dydt", index_uni(12));
    current_statement__ = 472;
    return dydt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct shm_chi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& time, const std::vector<T1__>& y,
           const std::vector<T2__>& parms, const std::vector<T3__>& rdata,
           const std::vector<int>& idata, std::ostream* pstream__)  const 
{
return shm_chi(time, y, parms, rdata, idata, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
solve_init2(const T0__& ageAtBMT, const std::vector<T1__>& init_cond,
            const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ ta;
    ta = DUMMY_VAR__;
    
    current_statement__ = 474;
    ta = 40;
    std::vector<std::vector<local_scalar_t__>> y_init;
    y_init = std::vector<std::vector<local_scalar_t__>>(2, std::vector<local_scalar_t__>(12, DUMMY_VAR__));
    
    std::vector<local_scalar_t__> params_init;
    params_init = std::vector<local_scalar_t__>(7, DUMMY_VAR__);
    
    current_statement__ = 477;
    assign(params_init, rvalue(parms, "parms", index_min_max(1, 6)),
      "assigning variable params_init", index_min_max(1, 6));
    current_statement__ = 478;
    assign(params_init, ta, "assigning variable params_init", index_uni(7));
    current_statement__ = 479;
    assign(y_init, init_cond, "assigning variable y_init", index_uni(1));
    current_statement__ = 480;
    assign(y_init, init_cond, "assigning variable y_init", index_uni(1));
    current_statement__ = 485;
    if (logical_eq(ageAtBMT, 40)) {
      current_statement__ = 483;
      assign(y_init, init_cond, "assigning variable y_init", index_uni(2));
    } else {
      current_statement__ = 481;
      assign(y_init,
        to_array_1d(
          integrate_ode_rk45(shm_chi_functor__(), init_cond, ta,
            rep_array(ageAtBMT, 1), params_init, std::vector<double>{0.0},
            std::vector<int>{0}, pstream__)),
        "assigning variable y_init", index_uni(2));
    }
    current_statement__ = 486;
    return rvalue(y_init, "y_init", index_uni(2));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_init2_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
operator()(const T0__& ageAtBMT, const std::vector<T1__>& init_cond,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return solve_init2(ageAtBMT, init_cond, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
solve_chi2(const T0__& solve_time, const T1__& ageAtBMT,
           const std::vector<T2__>& init_cond,
           const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(12, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(7, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> y0;
    y0 = std::vector<local_scalar_t__>(12, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> init_tb;
    init_tb = std::vector<local_scalar_t__>(12, DUMMY_VAR__);
    
    current_statement__ = 492;
    assign(y0, solve_init2(ageAtBMT, init_cond, parms, pstream__),
      "assigning variable y0");
    current_statement__ = 493;
    assign(init_tb,
      (rvalue(y0, "y0", index_uni(1)) + rvalue(y0, "y0", index_uni(9))),
      "assigning variable init_tb", index_uni(1));
    current_statement__ = 494;
    assign(init_tb,
      (rvalue(y0, "y0", index_uni(2)) + rvalue(y0, "y0", index_uni(10))),
      "assigning variable init_tb", index_uni(2));
    current_statement__ = 495;
    assign(init_tb,
      (rvalue(y0, "y0", index_uni(3)) + rvalue(y0, "y0", index_uni(11))),
      "assigning variable init_tb", index_uni(3));
    current_statement__ = 496;
    assign(init_tb,
      (rvalue(y0, "y0", index_uni(4)) + rvalue(y0, "y0", index_uni(12))),
      "assigning variable init_tb", index_uni(4));
    current_statement__ = 497;
    assign(init_tb, rvalue(y0, "y0", index_uni(5)),
      "assigning variable init_tb", index_uni(5));
    current_statement__ = 498;
    assign(init_tb, rvalue(y0, "y0", index_uni(6)),
      "assigning variable init_tb", index_uni(6));
    current_statement__ = 499;
    assign(init_tb, rvalue(y0, "y0", index_uni(7)),
      "assigning variable init_tb", index_uni(7));
    current_statement__ = 500;
    assign(init_tb, rvalue(y0, "y0", index_uni(8)),
      "assigning variable init_tb", index_uni(8));
    current_statement__ = 501;
    assign(init_tb, 0.0, "assigning variable init_tb", index_uni(9));
    current_statement__ = 502;
    assign(init_tb, 0.0, "assigning variable init_tb", index_uni(10));
    current_statement__ = 503;
    assign(init_tb, 0.0, "assigning variable init_tb", index_uni(11));
    current_statement__ = 504;
    assign(init_tb, 0.0, "assigning variable init_tb", index_uni(12));
    current_statement__ = 505;
    assign(params, rvalue(parms, "parms", index_min_max(1, 6)),
      "assigning variable params", index_min_max(1, 6));
    current_statement__ = 506;
    assign(params, ageAtBMT, "assigning variable params", index_uni(7));
    current_statement__ = 507;
    assign(y_solve,
      to_array_1d(
        integrate_ode_rk45(shm_chi_functor__(), init_tb, ageAtBMT,
          rep_array(solve_time, 1), params, std::vector<double>{0.0},
          std::vector<int>{0}, pstream__)), "assigning variable y_solve");
    current_statement__ = 508;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_chi2_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& solve_time, const T1__& ageAtBMT,
           const std::vector<T2__>& init_cond,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return solve_chi2(solve_time, ageAtBMT, init_cond, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>>
solve_ode_chi2(const std::vector<T0__>& solve_time,
               const std::vector<T1__>& ageAtBMT,
               const std::vector<T2__>& init_cond,
               const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int numdim;
    numdim = std::numeric_limits<int>::min();
    
    current_statement__ = 510;
    numdim = size(solve_time);
    current_statement__ = 511;
    validate_non_negative_index("y_solve", "numdim", numdim);
    std::vector<std::vector<local_scalar_t__>> y_solve;
    y_solve = std::vector<std::vector<local_scalar_t__>>(numdim, std::vector<local_scalar_t__>(12, DUMMY_VAR__));
    
    current_statement__ = 515;
    for (int i = 1; i <= numdim; ++i) {
      current_statement__ = 513;
      assign(y_solve,
        solve_chi2(rvalue(solve_time, "solve_time", index_uni(i)),
          rvalue(ageAtBMT, "ageAtBMT", index_uni(i)), init_cond,
          parms, pstream__), "assigning variable y_solve", index_uni(i));}
    current_statement__ = 516;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_ode_chi2_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>>
operator()(const std::vector<T0__>& solve_time,
           const std::vector<T1__>& ageAtBMT,
           const std::vector<T2__>& init_cond,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return solve_ode_chi2(solve_time, ageAtBMT, init_cond, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
math_reduce(const T0__& global_params_arg__, const T1__& local_params_arg__,
            const std::vector<T2__>& x_r, const std::vector<int>& x_i,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__>;
  int current_statement__ = 0; 
  const auto& global_params = to_ref(global_params_arg__);
  const auto& local_params = to_ref(local_params_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 518;
    n = size(x_i);
    current_statement__ = 519;
    validate_non_negative_index("solve_time", "n", n);
    std::vector<local_scalar_t__> solve_time;
    solve_time = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 520;
    assign(solve_time, rvalue(x_r, "x_r", index_min_max(1, n)),
      "assigning variable solve_time");
    current_statement__ = 521;
    validate_non_negative_index("ageAtBMT", "n", n);
    std::vector<int> ageAtBMT;
    ageAtBMT = std::vector<int>(n, std::numeric_limits<int>::min());
    
    current_statement__ = 522;
    assign(ageAtBMT, rvalue(x_i, "x_i", index_min_max(1, n)),
      "assigning variable ageAtBMT");
    current_statement__ = 523;
    validate_non_negative_index("tb_time", "n", n);
    std::vector<local_scalar_t__> tb_time;
    tb_time = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    local_scalar_t__ y1_0;
    y1_0 = DUMMY_VAR__;
    
    current_statement__ = 525;
    y1_0 = rvalue(global_params, "global_params", index_uni(7));
    local_scalar_t__ y2_0;
    y2_0 = DUMMY_VAR__;
    
    current_statement__ = 526;
    y2_0 = rvalue(global_params, "global_params", index_uni(8));
    local_scalar_t__ y3_0;
    y3_0 = DUMMY_VAR__;
    
    current_statement__ = 527;
    y3_0 = rvalue(global_params, "global_params", index_uni(9));
    local_scalar_t__ y4_0;
    y4_0 = DUMMY_VAR__;
    
    current_statement__ = 528;
    y4_0 = rvalue(global_params, "global_params", index_uni(10));
    local_scalar_t__ y5_0;
    y5_0 = DUMMY_VAR__;
    
    current_statement__ = 529;
    y5_0 = rvalue(global_params, "global_params", index_uni(11));
    local_scalar_t__ y6_0;
    y6_0 = DUMMY_VAR__;
    
    current_statement__ = 530;
    y6_0 = rvalue(global_params, "global_params", index_uni(12));
    local_scalar_t__ y7_0;
    y7_0 = DUMMY_VAR__;
    
    current_statement__ = 531;
    y7_0 = rvalue(global_params, "global_params", index_uni(13));
    local_scalar_t__ y8_0;
    y8_0 = DUMMY_VAR__;
    
    current_statement__ = 532;
    y8_0 = rvalue(global_params, "global_params", index_uni(14));
    std::vector<local_scalar_t__> init_cond1;
    init_cond1 = std::vector<local_scalar_t__>(6, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> init_cond2;
    init_cond2 = std::vector<local_scalar_t__>(12, DUMMY_VAR__);
    
    current_statement__ = 535;
    validate_non_negative_index("simple_solve", "n", n);
    std::vector<std::vector<local_scalar_t__>> simple_solve;
    simple_solve = std::vector<std::vector<local_scalar_t__>>(n, std::vector<local_scalar_t__>(6, DUMMY_VAR__));
    
    current_statement__ = 537;
    validate_non_negative_index("chi_solve", "n", n);
    std::vector<std::vector<local_scalar_t__>> chi_solve;
    chi_solve = std::vector<std::vector<local_scalar_t__>>(n, std::vector<local_scalar_t__>(12, DUMMY_VAR__));
    
    current_statement__ = 539;
    validate_non_negative_index("counts_thy", "n", n);
    std::vector<local_scalar_t__> counts_thy;
    counts_thy = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 541;
    validate_non_negative_index("counts_per", "n", n);
    std::vector<local_scalar_t__> counts_per;
    counts_per = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 543;
    validate_non_negative_index("donor_counts_thy", "n", n);
    std::vector<local_scalar_t__> donor_counts_thy;
    donor_counts_thy = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 545;
    validate_non_negative_index("donor_counts_per", "n", n);
    std::vector<local_scalar_t__> donor_counts_per;
    donor_counts_per = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 547;
    validate_non_negative_index("host_counts_thy", "n", n);
    std::vector<local_scalar_t__> host_counts_thy;
    host_counts_thy = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 549;
    validate_non_negative_index("host_counts_per", "n", n);
    std::vector<local_scalar_t__> host_counts_per;
    host_counts_per = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 551;
    validate_non_negative_index("donor_ki_thy", "n", n);
    std::vector<local_scalar_t__> donor_ki_thy;
    donor_ki_thy = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 553;
    validate_non_negative_index("donor_ki_per", "n", n);
    std::vector<local_scalar_t__> donor_ki_per;
    donor_ki_per = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 555;
    validate_non_negative_index("host_ki_thy", "n", n);
    std::vector<local_scalar_t__> host_ki_thy;
    host_ki_thy = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 557;
    validate_non_negative_index("host_ki_per", "n", n);
    std::vector<local_scalar_t__> host_ki_per;
    host_ki_per = std::vector<local_scalar_t__>(n, DUMMY_VAR__);
    
    current_statement__ = 559;
    validate_non_negative_index("y_mean_stacked", "8 * n", (8 * n));
    Eigen::Matrix<local_scalar_t__, -1, 1> y_mean_stacked;
    y_mean_stacked = Eigen::Matrix<local_scalar_t__, -1, 1>((8 * n));
    stan::math::fill(y_mean_stacked, DUMMY_VAR__);
    
    current_statement__ = 561;
    assign(init_cond1, (y1_0 + y2_0),
      "assigning variable init_cond1", index_uni(1));
    current_statement__ = 562;
    assign(init_cond1, (y3_0 + y4_0),
      "assigning variable init_cond1", index_uni(2));
    current_statement__ = 563;
    assign(init_cond1, (y5_0 + y6_0),
      "assigning variable init_cond1", index_uni(3));
    current_statement__ = 564;
    assign(init_cond1, (y7_0 + y8_0),
      "assigning variable init_cond1", index_uni(4));
    current_statement__ = 565;
    assign(init_cond1, 0, "assigning variable init_cond1", index_uni(5));
    current_statement__ = 566;
    assign(init_cond1, 0, "assigning variable init_cond1", index_uni(6));
    current_statement__ = 567;
    assign(init_cond2, y1_0, "assigning variable init_cond2", index_uni(1));
    current_statement__ = 568;
    assign(init_cond2, y2_0, "assigning variable init_cond2", index_uni(2));
    current_statement__ = 569;
    assign(init_cond2, y3_0, "assigning variable init_cond2", index_uni(3));
    current_statement__ = 570;
    assign(init_cond2, y4_0, "assigning variable init_cond2", index_uni(4));
    current_statement__ = 571;
    assign(init_cond2, y5_0, "assigning variable init_cond2", index_uni(5));
    current_statement__ = 572;
    assign(init_cond2, y6_0, "assigning variable init_cond2", index_uni(6));
    current_statement__ = 573;
    assign(init_cond2, y7_0, "assigning variable init_cond2", index_uni(7));
    current_statement__ = 574;
    assign(init_cond2, y8_0, "assigning variable init_cond2", index_uni(8));
    current_statement__ = 575;
    assign(init_cond2, 0, "assigning variable init_cond2", index_uni(9));
    current_statement__ = 576;
    assign(init_cond2, 0, "assigning variable init_cond2", index_uni(10));
    current_statement__ = 577;
    assign(init_cond2, 0, "assigning variable init_cond2", index_uni(11));
    current_statement__ = 578;
    assign(init_cond2, 0, "assigning variable init_cond2", index_uni(12));
    current_statement__ = 581;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 579;
      assign(tb_time, (rvalue(ageAtBMT, "ageAtBMT", index_uni(i)) / 1.0),
        "assigning variable tb_time", index_uni(i));}
    current_statement__ = 582;
    assign(simple_solve,
      solve_ode_chi1(solve_time, tb_time, init_cond1,
        to_array_1d(global_params), pstream__),
      "assigning variable simple_solve");
    current_statement__ = 583;
    assign(chi_solve,
      solve_ode_chi2(solve_time, tb_time, init_cond2,
        to_array_1d(global_params), pstream__),
      "assigning variable chi_solve");
    current_statement__ = 603;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 584;
      assign(counts_thy,
        ((rvalue(simple_solve, "simple_solve", index_uni(i), index_uni(1)) +
           rvalue(simple_solve, "simple_solve", index_uni(i), index_uni(4)))
          + rvalue(simple_solve, "simple_solve", index_uni(i), index_uni(5))),
        "assigning variable counts_thy", index_uni(i));
      current_statement__ = 585;
      assign(counts_per,
        ((rvalue(simple_solve, "simple_solve", index_uni(i), index_uni(2)) +
           rvalue(simple_solve, "simple_solve", index_uni(i), index_uni(3)))
          + rvalue(simple_solve, "simple_solve", index_uni(i), index_uni(6))),
        "assigning variable counts_per", index_uni(i));
      current_statement__ = 586;
      assign(donor_counts_thy,
        (rvalue(chi_solve, "chi_solve", index_uni(i), index_uni(9)) +
          rvalue(chi_solve, "chi_solve", index_uni(i), index_uni(10))),
        "assigning variable donor_counts_thy", index_uni(i));
      current_statement__ = 587;
      assign(donor_counts_per,
        (rvalue(chi_solve, "chi_solve", index_uni(i), index_uni(11)) +
          rvalue(chi_solve, "chi_solve", index_uni(i), index_uni(12))),
        "assigning variable donor_counts_per", index_uni(i));
      current_statement__ = 588;
      assign(host_counts_thy,
        (((rvalue(chi_solve, "chi_solve", index_uni(i), index_uni(1)) +
            rvalue(chi_solve, "chi_solve", index_uni(i), index_uni(2))) +
           rvalue(chi_solve, "chi_solve", index_uni(i), index_uni(7))) +
          rvalue(chi_solve, "chi_solve", index_uni(i), index_uni(8))),
        "assigning variable host_counts_thy", index_uni(i));
      current_statement__ = 589;
      assign(host_counts_per,
        (((rvalue(chi_solve, "chi_solve", index_uni(i), index_uni(3)) +
            rvalue(chi_solve, "chi_solve", index_uni(i), index_uni(4))) +
           rvalue(chi_solve, "chi_solve", index_uni(i), index_uni(5))) +
          rvalue(chi_solve, "chi_solve", index_uni(i), index_uni(6))),
        "assigning variable host_counts_per", index_uni(i));
      current_statement__ = 590;
      assign(donor_ki_thy,
        (rvalue(chi_solve, "chi_solve", index_uni(i), index_uni(9)) /
          rvalue(donor_counts_thy, "donor_counts_thy", index_uni(i))),
        "assigning variable donor_ki_thy", index_uni(i));
      current_statement__ = 591;
      assign(donor_ki_per,
        (rvalue(chi_solve, "chi_solve", index_uni(i), index_uni(11)) /
          rvalue(donor_counts_thy, "donor_counts_thy", index_uni(i))),
        "assigning variable donor_ki_per", index_uni(i));
      current_statement__ = 592;
      assign(host_ki_thy,
        ((rvalue(chi_solve, "chi_solve", index_uni(i), index_uni(1)) +
           rvalue(chi_solve, "chi_solve", index_uni(i), index_uni(7))) /
          rvalue(host_counts_thy, "host_counts_thy", index_uni(i))),
        "assigning variable host_ki_thy", index_uni(i));
      current_statement__ = 593;
      assign(host_ki_per,
        ((rvalue(chi_solve, "chi_solve", index_uni(i), index_uni(3)) +
           rvalue(chi_solve, "chi_solve", index_uni(i), index_uni(5))) /
          rvalue(host_counts_per, "host_counts_per", index_uni(i))),
        "assigning variable host_ki_per", index_uni(i));
      current_statement__ = 594;
      assign(y_mean_stacked, rvalue(counts_thy, "counts_thy", index_uni(i)),
        "assigning variable y_mean_stacked", index_uni(((8 * i) - 7)));
      current_statement__ = 595;
      assign(y_mean_stacked, rvalue(counts_per, "counts_per", index_uni(i)),
        "assigning variable y_mean_stacked", index_uni(((8 * i) - 6)));
      current_statement__ = 596;
      assign(y_mean_stacked,
        (rvalue(donor_counts_thy, "donor_counts_thy", index_uni(i)) /
          (rvalue(counts_thy, "counts_thy", index_uni(i)) *
            Chi_spline(
              (rvalue(solve_time, "solve_time", index_uni(i)) -
                rvalue(tb_time, "tb_time", index_uni(i))), pstream__))),
        "assigning variable y_mean_stacked", index_uni(((8 * i) - 5)));
      current_statement__ = 597;
      assign(y_mean_stacked,
        (rvalue(donor_counts_per, "donor_counts_per", index_uni(i)) /
          (rvalue(counts_per, "counts_per", index_uni(i)) *
            Chi_spline(
              (rvalue(solve_time, "solve_time", index_uni(i)) -
                rvalue(tb_time, "tb_time", index_uni(i))), pstream__))),
        "assigning variable y_mean_stacked", index_uni(((8 * i) - 4)));
      current_statement__ = 598;
      assign(y_mean_stacked,
        rvalue(host_ki_thy, "host_ki_thy", index_uni(i)),
        "assigning variable y_mean_stacked", index_uni(((8 * i) - 3)));
      current_statement__ = 599;
      assign(y_mean_stacked,
        rvalue(host_ki_per, "host_ki_per", index_uni(i)),
        "assigning variable y_mean_stacked", index_uni(((8 * i) - 2)));
      current_statement__ = 600;
      assign(y_mean_stacked,
        rvalue(donor_ki_thy, "donor_ki_thy", index_uni(i)),
        "assigning variable y_mean_stacked", index_uni(((8 * i) - 1)));
      current_statement__ = 601;
      assign(y_mean_stacked,
        rvalue(donor_ki_per, "donor_ki_per", index_uni(i)),
        "assigning variable y_mean_stacked", index_uni(((8 * i) - 0)));}
    current_statement__ = 604;
    return y_mean_stacked;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct math_reduce_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
operator()(const T0__& global_params, const T1__& local_params,
           const std::vector<T2__>& x_r, const std::vector<int>& x_i,
           std::ostream* pstream__)  const 
{
return math_reduce(global_params, local_params, x_r, x_i, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
logit_inverse(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ ans;
    ans = DUMMY_VAR__;
    
    current_statement__ = 607;
    ans = (stan::math::exp(x) / (1 + stan::math::exp(x)));
    current_statement__ = 608;
    return ans;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct logit_inverse_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return logit_inverse(x, pstream__);
}
};

template <typename T0__>
std::vector<stan::promote_args_t<T0__>>
asinsqrt_array(const std::vector<T0__>& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndims;
    ndims = std::numeric_limits<int>::min();
    
    current_statement__ = 610;
    ndims = size(x);
    current_statement__ = 611;
    validate_non_negative_index("answer", "ndims", ndims);
    std::vector<local_scalar_t__> answer;
    answer = std::vector<local_scalar_t__>(ndims, DUMMY_VAR__);
    
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 613;
    a = 1.2;
    current_statement__ = 616;
    for (int i = 1; i <= ndims; ++i) {
      current_statement__ = 614;
      assign(answer,
        stan::math::asin(
          (stan::math::sqrt(rvalue(x, "x", index_uni(i))) /
            stan::math::sqrt(a))), "assigning variable answer", index_uni(i));
    }
    current_statement__ = 617;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct asinsqrt_array_functor__ {
template <typename T0__>
std::vector<stan::promote_args_t<T0__>>
operator()(const std::vector<T0__>& x, std::ostream* pstream__)  const 
{
return asinsqrt_array(x, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
asinsqrt_real(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 619;
    a = 1.2;
    local_scalar_t__ answer;
    answer = DUMMY_VAR__;
    
    current_statement__ = 620;
    answer = stan::math::asin((stan::math::sqrt(x) / stan::math::sqrt(a)));
    current_statement__ = 621;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct asinsqrt_real_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return asinsqrt_real(x, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
asinsqrt_inv(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 623;
    a = 1.2;
    local_scalar_t__ answer;
    answer = DUMMY_VAR__;
    
    current_statement__ = 624;
    answer = (a * pow(stan::math::sin(x), 2));
    current_statement__ = 625;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct asinsqrt_inv_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return asinsqrt_inv(x, pstream__);
}
};

class MAP_Incumbent_full_model final : public model_base_crtp<MAP_Incumbent_full_model> {

 private:
  int numObs1;
  int numObs2;
  int numObs3;
  int numObs4;
  int n_solve;
  int n_shards;
  int numPred;
  std::vector<int> solve_time;
  std::vector<int> ageAtBMT;
  std::vector<int> dpBMT;
  std::vector<int> time_index_counts;
  std::vector<int> time_index_chi;
  std::vector<int> time_index_donorki;
  std::vector<int> time_index_hostki;
  std::vector<double> counts_per;
  std::vector<double> counts_thy;
  std::vector<double> Nfd_thy;
  std::vector<double> Nfd_per;
  std::vector<double> ki_donor_per;
  std::vector<double> ki_donor_thy;
  std::vector<double> ki_host_per;
  std::vector<double> ki_host_thy;
  std::vector<double> ts_pred1;
  std::vector<double> ts_pred2;
  std::vector<double> ts_pred3;
  std::vector<double> ts_pred4;
  std::vector<double> tb_pred1;
  std::vector<double> tb_pred2;
  std::vector<double> tb_pred3;
  std::vector<double> tb_pred4;
  int M;
  std::vector<std::vector<int>> x_i;
  std::vector<std::vector<double>> x_r;
  std::vector<Eigen::Matrix<double, -1, 1>> local_params;
  int y_mean_stacked_1dim__;
 
 public:
  ~MAP_Incumbent_full_model() { }
  
  inline std::string model_name() const final { return "MAP_Incumbent_full_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 a7f4b745", "stancflags = "};
  }
  
  
  MAP_Incumbent_full_model(stan::io::var_context& context__,
                           unsigned int random_seed__ = 0,
                           std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_Incumbent_full_model_namespace::MAP_Incumbent_full_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 238;
      context__.validate_dims("data initialization","numObs1","int",
          context__.to_vec());
      numObs1 = std::numeric_limits<int>::min();
      
      current_statement__ = 238;
      numObs1 = context__.vals_i("numObs1")[(1 - 1)];
      current_statement__ = 239;
      context__.validate_dims("data initialization","numObs2","int",
          context__.to_vec());
      numObs2 = std::numeric_limits<int>::min();
      
      current_statement__ = 239;
      numObs2 = context__.vals_i("numObs2")[(1 - 1)];
      current_statement__ = 240;
      context__.validate_dims("data initialization","numObs3","int",
          context__.to_vec());
      numObs3 = std::numeric_limits<int>::min();
      
      current_statement__ = 240;
      numObs3 = context__.vals_i("numObs3")[(1 - 1)];
      current_statement__ = 241;
      context__.validate_dims("data initialization","numObs4","int",
          context__.to_vec());
      numObs4 = std::numeric_limits<int>::min();
      
      current_statement__ = 241;
      numObs4 = context__.vals_i("numObs4")[(1 - 1)];
      current_statement__ = 242;
      context__.validate_dims("data initialization","n_solve","int",
          context__.to_vec());
      n_solve = std::numeric_limits<int>::min();
      
      current_statement__ = 242;
      n_solve = context__.vals_i("n_solve")[(1 - 1)];
      current_statement__ = 243;
      context__.validate_dims("data initialization","n_shards","int",
          context__.to_vec());
      n_shards = std::numeric_limits<int>::min();
      
      current_statement__ = 243;
      n_shards = context__.vals_i("n_shards")[(1 - 1)];
      current_statement__ = 244;
      context__.validate_dims("data initialization","numPred","int",
          context__.to_vec());
      numPred = std::numeric_limits<int>::min();
      
      current_statement__ = 244;
      numPred = context__.vals_i("numPred")[(1 - 1)];
      current_statement__ = 245;
      validate_non_negative_index("solve_time", "n_solve", n_solve);
      current_statement__ = 246;
      context__.validate_dims("data initialization","solve_time","int",
          context__.to_vec(n_solve));
      solve_time = std::vector<int>(n_solve, std::numeric_limits<int>::min());
      
      current_statement__ = 246;
      assign(solve_time, context__.vals_i("solve_time"),
        "assigning variable solve_time");
      current_statement__ = 247;
      validate_non_negative_index("ageAtBMT", "n_solve", n_solve);
      current_statement__ = 248;
      context__.validate_dims("data initialization","ageAtBMT","int",
          context__.to_vec(n_solve));
      ageAtBMT = std::vector<int>(n_solve, std::numeric_limits<int>::min());
      
      current_statement__ = 248;
      assign(ageAtBMT, context__.vals_i("ageAtBMT"),
        "assigning variable ageAtBMT");
      current_statement__ = 249;
      validate_non_negative_index("dpBMT", "n_solve", n_solve);
      current_statement__ = 250;
      context__.validate_dims("data initialization","dpBMT","int",
          context__.to_vec(n_solve));
      dpBMT = std::vector<int>(n_solve, std::numeric_limits<int>::min());
      
      current_statement__ = 250;
      assign(dpBMT, context__.vals_i("dpBMT"), "assigning variable dpBMT");
      current_statement__ = 251;
      validate_non_negative_index("time_index_counts", "numObs1", numObs1);
      current_statement__ = 252;
      context__.validate_dims("data initialization","time_index_counts",
          "int",context__.to_vec(numObs1));
      time_index_counts = std::vector<int>(numObs1, std::numeric_limits<int>::min());
      
      current_statement__ = 252;
      assign(time_index_counts, context__.vals_i("time_index_counts"),
        "assigning variable time_index_counts");
      current_statement__ = 253;
      validate_non_negative_index("time_index_chi", "numObs2", numObs2);
      current_statement__ = 254;
      context__.validate_dims("data initialization","time_index_chi","int",
          context__.to_vec(numObs2));
      time_index_chi = std::vector<int>(numObs2, std::numeric_limits<int>::min());
      
      current_statement__ = 254;
      assign(time_index_chi, context__.vals_i("time_index_chi"),
        "assigning variable time_index_chi");
      current_statement__ = 255;
      validate_non_negative_index("time_index_donorki", "numObs3", numObs3);
      current_statement__ = 256;
      context__.validate_dims("data initialization","time_index_donorki",
          "int",context__.to_vec(numObs3));
      time_index_donorki = std::vector<int>(numObs3, std::numeric_limits<int>::min());
      
      current_statement__ = 256;
      assign(time_index_donorki, context__.vals_i("time_index_donorki"),
        "assigning variable time_index_donorki");
      current_statement__ = 257;
      validate_non_negative_index("time_index_hostki", "numObs4", numObs4);
      current_statement__ = 258;
      context__.validate_dims("data initialization","time_index_hostki",
          "int",context__.to_vec(numObs4));
      time_index_hostki = std::vector<int>(numObs4, std::numeric_limits<int>::min());
      
      current_statement__ = 258;
      assign(time_index_hostki, context__.vals_i("time_index_hostki"),
        "assigning variable time_index_hostki");
      current_statement__ = 259;
      validate_non_negative_index("counts_per", "numObs1", numObs1);
      current_statement__ = 260;
      context__.validate_dims("data initialization","counts_per","double",
          context__.to_vec(numObs1));
      counts_per = std::vector<double>(numObs1, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 260;
      assign(counts_per, context__.vals_r("counts_per"),
        "assigning variable counts_per");
      current_statement__ = 261;
      validate_non_negative_index("counts_thy", "numObs1", numObs1);
      current_statement__ = 262;
      context__.validate_dims("data initialization","counts_thy","double",
          context__.to_vec(numObs1));
      counts_thy = std::vector<double>(numObs1, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 262;
      assign(counts_thy, context__.vals_r("counts_thy"),
        "assigning variable counts_thy");
      current_statement__ = 263;
      validate_non_negative_index("Nfd_thy", "numObs2", numObs2);
      current_statement__ = 264;
      context__.validate_dims("data initialization","Nfd_thy","double",
          context__.to_vec(numObs2));
      Nfd_thy = std::vector<double>(numObs2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 264;
      assign(Nfd_thy, context__.vals_r("Nfd_thy"),
        "assigning variable Nfd_thy");
      current_statement__ = 265;
      validate_non_negative_index("Nfd_per", "numObs2", numObs2);
      current_statement__ = 266;
      context__.validate_dims("data initialization","Nfd_per","double",
          context__.to_vec(numObs2));
      Nfd_per = std::vector<double>(numObs2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 266;
      assign(Nfd_per, context__.vals_r("Nfd_per"),
        "assigning variable Nfd_per");
      current_statement__ = 267;
      validate_non_negative_index("ki_donor_per", "numObs3", numObs3);
      current_statement__ = 268;
      context__.validate_dims("data initialization","ki_donor_per","double",
          context__.to_vec(numObs3));
      ki_donor_per = std::vector<double>(numObs3, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 268;
      assign(ki_donor_per, context__.vals_r("ki_donor_per"),
        "assigning variable ki_donor_per");
      current_statement__ = 269;
      validate_non_negative_index("ki_donor_thy", "numObs3", numObs3);
      current_statement__ = 270;
      context__.validate_dims("data initialization","ki_donor_thy","double",
          context__.to_vec(numObs3));
      ki_donor_thy = std::vector<double>(numObs3, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 270;
      assign(ki_donor_thy, context__.vals_r("ki_donor_thy"),
        "assigning variable ki_donor_thy");
      current_statement__ = 271;
      validate_non_negative_index("ki_host_per", "numObs4", numObs4);
      current_statement__ = 272;
      context__.validate_dims("data initialization","ki_host_per","double",
          context__.to_vec(numObs4));
      ki_host_per = std::vector<double>(numObs4, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 272;
      assign(ki_host_per, context__.vals_r("ki_host_per"),
        "assigning variable ki_host_per");
      current_statement__ = 273;
      validate_non_negative_index("ki_host_thy", "numObs4", numObs4);
      current_statement__ = 274;
      context__.validate_dims("data initialization","ki_host_thy","double",
          context__.to_vec(numObs4));
      ki_host_thy = std::vector<double>(numObs4, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 274;
      assign(ki_host_thy, context__.vals_r("ki_host_thy"),
        "assigning variable ki_host_thy");
      current_statement__ = 275;
      validate_non_negative_index("ts_pred1", "numPred", numPred);
      current_statement__ = 276;
      context__.validate_dims("data initialization","ts_pred1","double",
          context__.to_vec(numPred));
      ts_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 276;
      assign(ts_pred1, context__.vals_r("ts_pred1"),
        "assigning variable ts_pred1");
      current_statement__ = 277;
      validate_non_negative_index("ts_pred2", "numPred", numPred);
      current_statement__ = 278;
      context__.validate_dims("data initialization","ts_pred2","double",
          context__.to_vec(numPred));
      ts_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 278;
      assign(ts_pred2, context__.vals_r("ts_pred2"),
        "assigning variable ts_pred2");
      current_statement__ = 279;
      validate_non_negative_index("ts_pred3", "numPred", numPred);
      current_statement__ = 280;
      context__.validate_dims("data initialization","ts_pred3","double",
          context__.to_vec(numPred));
      ts_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 280;
      assign(ts_pred3, context__.vals_r("ts_pred3"),
        "assigning variable ts_pred3");
      current_statement__ = 281;
      validate_non_negative_index("ts_pred4", "numPred", numPred);
      current_statement__ = 282;
      context__.validate_dims("data initialization","ts_pred4","double",
          context__.to_vec(numPred));
      ts_pred4 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 282;
      assign(ts_pred4, context__.vals_r("ts_pred4"),
        "assigning variable ts_pred4");
      current_statement__ = 283;
      validate_non_negative_index("tb_pred1", "numPred", numPred);
      current_statement__ = 284;
      context__.validate_dims("data initialization","tb_pred1","double",
          context__.to_vec(numPred));
      tb_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 284;
      assign(tb_pred1, context__.vals_r("tb_pred1"),
        "assigning variable tb_pred1");
      current_statement__ = 285;
      validate_non_negative_index("tb_pred2", "numPred", numPred);
      current_statement__ = 286;
      context__.validate_dims("data initialization","tb_pred2","double",
          context__.to_vec(numPred));
      tb_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 286;
      assign(tb_pred2, context__.vals_r("tb_pred2"),
        "assigning variable tb_pred2");
      current_statement__ = 287;
      validate_non_negative_index("tb_pred3", "numPred", numPred);
      current_statement__ = 288;
      context__.validate_dims("data initialization","tb_pred3","double",
          context__.to_vec(numPred));
      tb_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 288;
      assign(tb_pred3, context__.vals_r("tb_pred3"),
        "assigning variable tb_pred3");
      current_statement__ = 289;
      validate_non_negative_index("tb_pred4", "numPred", numPred);
      current_statement__ = 290;
      context__.validate_dims("data initialization","tb_pred4","double",
          context__.to_vec(numPred));
      tb_pred4 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 290;
      assign(tb_pred4, context__.vals_r("tb_pred4"),
        "assigning variable tb_pred4");
      current_statement__ = 291;
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 291;
      M = (n_solve / n_shards);
      current_statement__ = 292;
      validate_non_negative_index("x_i", "n_shards", n_shards);
      current_statement__ = 293;
      validate_non_negative_index("x_i", "M", M);
      current_statement__ = 294;
      x_i = std::vector<std::vector<int>>(n_shards, std::vector<int>(M, std::numeric_limits<int>::min()));
      
      current_statement__ = 295;
      validate_non_negative_index("x_r", "n_shards", n_shards);
      current_statement__ = 296;
      validate_non_negative_index("x_r", "M", M);
      current_statement__ = 297;
      x_r = std::vector<std::vector<double>>(n_shards, std::vector<double>(M, std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 298;
      validate_non_negative_index("local_params", "n_shards", n_shards);
      current_statement__ = 299;
      local_params = std::vector<Eigen::Matrix<double, -1, 1>>(n_shards, Eigen::Matrix<double, -1, 1>(0));
      stan::math::fill(local_params, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 305;
      for (int s = 1; s <= n_shards; ++s) {
        int i;
        i = std::numeric_limits<int>::min();
        
        current_statement__ = 300;
        i = (1 + ((s - 1) * M));
        int j;
        j = std::numeric_limits<int>::min();
        
        current_statement__ = 301;
        j = (s * M);
        current_statement__ = 302;
        assign(x_i, rvalue(ageAtBMT, "ageAtBMT", index_min_max(i, j)),
          "assigning variable x_i", index_uni(s), index_min_max(1, M));
        current_statement__ = 303;
        assign(x_r, rvalue(solve_time, "solve_time", index_min_max(i, j)),
          "assigning variable x_r", index_uni(s), index_min_max(1, M));}
      current_statement__ = 306;
      validate_non_negative_index("counts_thy_solve", "n_solve", n_solve);
      current_statement__ = 307;
      validate_non_negative_index("counts_per_solve", "n_solve", n_solve);
      current_statement__ = 308;
      validate_non_negative_index("Nfd_thy_solve", "n_solve", n_solve);
      current_statement__ = 309;
      validate_non_negative_index("Nfd_per_solve", "n_solve", n_solve);
      current_statement__ = 310;
      validate_non_negative_index("ki_host_thy_solve", "n_solve", n_solve);
      current_statement__ = 311;
      validate_non_negative_index("ki_host_per_solve", "n_solve", n_solve);
      current_statement__ = 312;
      validate_non_negative_index("ki_donor_thy_solve", "n_solve", n_solve);
      current_statement__ = 313;
      validate_non_negative_index("ki_donor_per_solve", "n_solve", n_solve);
      current_statement__ = 314;
      y_mean_stacked_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 314;
      y_mean_stacked_1dim__ = (8 * n_solve);
      current_statement__ = 314;
      validate_non_negative_index("y_mean_stacked", "8 * n_solve",
                                  y_mean_stacked_1dim__);
      current_statement__ = 315;
      validate_non_negative_index("counts_thy_mean", "numObs1", numObs1);
      current_statement__ = 316;
      validate_non_negative_index("counts_per_mean", "numObs1", numObs1);
      current_statement__ = 317;
      validate_non_negative_index("Nfd_thy_mean", "numObs2", numObs2);
      current_statement__ = 318;
      validate_non_negative_index("Nfd_per_mean", "numObs2", numObs2);
      current_statement__ = 319;
      validate_non_negative_index("ki_host_thy_mean", "numObs4", numObs4);
      current_statement__ = 320;
      validate_non_negative_index("ki_host_per_mean", "numObs4", numObs4);
      current_statement__ = 321;
      validate_non_negative_index("ki_donor_thy_mean", "numObs3", numObs3);
      current_statement__ = 322;
      validate_non_negative_index("ki_donor_per_mean", "numObs3", numObs3);
      current_statement__ = 323;
      validate_non_negative_index("y_simple_pred1", "numPred", numPred);
      current_statement__ = 324;
      validate_non_negative_index("y_simple_pred2", "numPred", numPred);
      current_statement__ = 325;
      validate_non_negative_index("y_simple_pred3", "numPred", numPred);
      current_statement__ = 326;
      validate_non_negative_index("y_simple_pred4", "numPred", numPred);
      current_statement__ = 327;
      validate_non_negative_index("y_chi_pred1", "numPred", numPred);
      current_statement__ = 328;
      validate_non_negative_index("y_chi_pred2", "numPred", numPred);
      current_statement__ = 329;
      validate_non_negative_index("y_chi_pred3", "numPred", numPred);
      current_statement__ = 330;
      validate_non_negative_index("y_chi_pred4", "numPred", numPred);
      current_statement__ = 331;
      validate_non_negative_index("counts_thy_mean_pred1", "numPred", numPred);
      current_statement__ = 332;
      validate_non_negative_index("counts_per_mean_pred1", "numPred", numPred);
      current_statement__ = 333;
      validate_non_negative_index("counts_thy_mean_pred2", "numPred", numPred);
      current_statement__ = 334;
      validate_non_negative_index("counts_per_mean_pred2", "numPred", numPred);
      current_statement__ = 335;
      validate_non_negative_index("counts_thy_mean_pred3", "numPred", numPred);
      current_statement__ = 336;
      validate_non_negative_index("counts_per_mean_pred3", "numPred", numPred);
      current_statement__ = 337;
      validate_non_negative_index("counts_thy_mean_pred4", "numPred", numPred);
      current_statement__ = 338;
      validate_non_negative_index("counts_per_mean_pred4", "numPred", numPred);
      current_statement__ = 339;
      validate_non_negative_index("Nfd_thy_mean_pred1", "numPred", numPred);
      current_statement__ = 340;
      validate_non_negative_index("Nfd_per_mean_pred1", "numPred", numPred);
      current_statement__ = 341;
      validate_non_negative_index("Nfd_thy_mean_pred2", "numPred", numPred);
      current_statement__ = 342;
      validate_non_negative_index("Nfd_per_mean_pred2", "numPred", numPred);
      current_statement__ = 343;
      validate_non_negative_index("Nfd_thy_mean_pred3", "numPred", numPred);
      current_statement__ = 344;
      validate_non_negative_index("Nfd_per_mean_pred3", "numPred", numPred);
      current_statement__ = 345;
      validate_non_negative_index("Nfd_thy_mean_pred4", "numPred", numPred);
      current_statement__ = 346;
      validate_non_negative_index("Nfd_per_mean_pred4", "numPred", numPred);
      current_statement__ = 347;
      validate_non_negative_index("ki_donor_per_mean_pred1", "numPred",
                                  numPred);
      current_statement__ = 348;
      validate_non_negative_index("ki_donor_thy_mean_pred1", "numPred",
                                  numPred);
      current_statement__ = 349;
      validate_non_negative_index("ki_donor_per_mean_pred2", "numPred",
                                  numPred);
      current_statement__ = 350;
      validate_non_negative_index("ki_donor_thy_mean_pred2", "numPred",
                                  numPred);
      current_statement__ = 351;
      validate_non_negative_index("ki_donor_per_mean_pred3", "numPred",
                                  numPred);
      current_statement__ = 352;
      validate_non_negative_index("ki_donor_thy_mean_pred3", "numPred",
                                  numPred);
      current_statement__ = 353;
      validate_non_negative_index("ki_donor_per_mean_pred4", "numPred",
                                  numPred);
      current_statement__ = 354;
      validate_non_negative_index("ki_donor_thy_mean_pred4", "numPred",
                                  numPred);
      current_statement__ = 355;
      validate_non_negative_index("ki_host_per_mean_pred1", "numPred",
                                  numPred);
      current_statement__ = 356;
      validate_non_negative_index("ki_host_thy_mean_pred1", "numPred",
                                  numPred);
      current_statement__ = 357;
      validate_non_negative_index("ki_host_per_mean_pred2", "numPred",
                                  numPred);
      current_statement__ = 358;
      validate_non_negative_index("ki_host_thy_mean_pred2", "numPred",
                                  numPred);
      current_statement__ = 359;
      validate_non_negative_index("ki_host_per_mean_pred3", "numPred",
                                  numPred);
      current_statement__ = 360;
      validate_non_negative_index("ki_host_thy_mean_pred3", "numPred",
                                  numPred);
      current_statement__ = 361;
      validate_non_negative_index("ki_host_per_mean_pred4", "numPred",
                                  numPred);
      current_statement__ = 362;
      validate_non_negative_index("ki_host_thy_mean_pred4", "numPred",
                                  numPred);
      current_statement__ = 363;
      validate_non_negative_index("log_lik_counts_thy", "numObs1", numObs1);
      current_statement__ = 364;
      validate_non_negative_index("log_lik_counts_per", "numObs1", numObs1);
      current_statement__ = 365;
      validate_non_negative_index("log_lik_Nfd_thy", "numObs2", numObs2);
      current_statement__ = 366;
      validate_non_negative_index("log_lik_Nfd_per", "numObs2", numObs2);
      current_statement__ = 367;
      validate_non_negative_index("log_lik_ki_donor_thy", "numObs3", numObs3);
      current_statement__ = 368;
      validate_non_negative_index("log_lik_ki_donor_per", "numObs3", numObs3);
      current_statement__ = 369;
      validate_non_negative_index("log_lik_ki_host_thy", "numObs4", numObs4);
      current_statement__ = 370;
      validate_non_negative_index("log_lik_ki_host_per", "numObs4", numObs4);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_Incumbent_full_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ psi;
      psi = DUMMY_VAR__;
      
      current_statement__ = 1;
      psi = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        psi = stan::math::lub_constrain(psi, 0, 1, lp__);
      } else {
        current_statement__ = 1;
        psi = stan::math::lub_constrain(psi, 0, 1);
      }
      local_scalar_t__ rho_D;
      rho_D = DUMMY_VAR__;
      
      current_statement__ = 2;
      rho_D = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        rho_D = stan::math::lub_constrain(rho_D, 0, 1, lp__);
      } else {
        current_statement__ = 2;
        rho_D = stan::math::lub_constrain(rho_D, 0, 1);
      }
      local_scalar_t__ alpha;
      alpha = DUMMY_VAR__;
      
      current_statement__ = 3;
      alpha = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        alpha = stan::math::lub_constrain(alpha, 0, 1, lp__);
      } else {
        current_statement__ = 3;
        alpha = stan::math::lub_constrain(alpha, 0, 1);
      }
      local_scalar_t__ lambda_D;
      lambda_D = DUMMY_VAR__;
      
      current_statement__ = 4;
      lambda_D = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        lambda_D = stan::math::lub_constrain(lambda_D, 0, 1, lp__);
      } else {
        current_statement__ = 4;
        lambda_D = stan::math::lub_constrain(lambda_D, 0, 1);
      }
      local_scalar_t__ rho_I;
      rho_I = DUMMY_VAR__;
      
      current_statement__ = 5;
      rho_I = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        rho_I = stan::math::lub_constrain(rho_I, 0, 1, lp__);
      } else {
        current_statement__ = 5;
        rho_I = stan::math::lub_constrain(rho_I, 0, 1);
      }
      local_scalar_t__ Beta;
      Beta = DUMMY_VAR__;
      
      current_statement__ = 6;
      Beta = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        Beta = stan::math::lub_constrain(Beta, 0, 1, lp__);
      } else {
        current_statement__ = 6;
        Beta = stan::math::lub_constrain(Beta, 0, 1);
      }
      local_scalar_t__ y1_0;
      y1_0 = DUMMY_VAR__;
      
      current_statement__ = 7;
      y1_0 = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        y1_0 = stan::math::lb_constrain(y1_0, 0, lp__);
      } else {
        current_statement__ = 7;
        y1_0 = stan::math::lb_constrain(y1_0, 0);
      }
      local_scalar_t__ y2_0;
      y2_0 = DUMMY_VAR__;
      
      current_statement__ = 8;
      y2_0 = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        y2_0 = stan::math::lb_constrain(y2_0, 0, lp__);
      } else {
        current_statement__ = 8;
        y2_0 = stan::math::lb_constrain(y2_0, 0);
      }
      local_scalar_t__ y3_0;
      y3_0 = DUMMY_VAR__;
      
      current_statement__ = 9;
      y3_0 = in__.scalar();
      current_statement__ = 9;
      if (jacobian__) {
        current_statement__ = 9;
        y3_0 = stan::math::lb_constrain(y3_0, 0, lp__);
      } else {
        current_statement__ = 9;
        y3_0 = stan::math::lb_constrain(y3_0, 0);
      }
      local_scalar_t__ y4_0;
      y4_0 = DUMMY_VAR__;
      
      current_statement__ = 10;
      y4_0 = in__.scalar();
      current_statement__ = 10;
      if (jacobian__) {
        current_statement__ = 10;
        y4_0 = stan::math::lb_constrain(y4_0, 0, lp__);
      } else {
        current_statement__ = 10;
        y4_0 = stan::math::lb_constrain(y4_0, 0);
      }
      local_scalar_t__ y5_0;
      y5_0 = DUMMY_VAR__;
      
      current_statement__ = 11;
      y5_0 = in__.scalar();
      current_statement__ = 11;
      if (jacobian__) {
        current_statement__ = 11;
        y5_0 = stan::math::lb_constrain(y5_0, 0, lp__);
      } else {
        current_statement__ = 11;
        y5_0 = stan::math::lb_constrain(y5_0, 0);
      }
      local_scalar_t__ y6_0;
      y6_0 = DUMMY_VAR__;
      
      current_statement__ = 12;
      y6_0 = in__.scalar();
      current_statement__ = 12;
      if (jacobian__) {
        current_statement__ = 12;
        y6_0 = stan::math::lb_constrain(y6_0, 0, lp__);
      } else {
        current_statement__ = 12;
        y6_0 = stan::math::lb_constrain(y6_0, 0);
      }
      local_scalar_t__ y7_0;
      y7_0 = DUMMY_VAR__;
      
      current_statement__ = 13;
      y7_0 = in__.scalar();
      current_statement__ = 13;
      if (jacobian__) {
        current_statement__ = 13;
        y7_0 = stan::math::lb_constrain(y7_0, 0, lp__);
      } else {
        current_statement__ = 13;
        y7_0 = stan::math::lb_constrain(y7_0, 0);
      }
      local_scalar_t__ y8_0;
      y8_0 = DUMMY_VAR__;
      
      current_statement__ = 14;
      y8_0 = in__.scalar();
      current_statement__ = 14;
      if (jacobian__) {
        current_statement__ = 14;
        y8_0 = stan::math::lb_constrain(y8_0, 0, lp__);
      } else {
        current_statement__ = 14;
        y8_0 = stan::math::lb_constrain(y8_0, 0);
      }
      local_scalar_t__ sigma_counts_per;
      sigma_counts_per = DUMMY_VAR__;
      
      current_statement__ = 15;
      sigma_counts_per = in__.scalar();
      current_statement__ = 15;
      if (jacobian__) {
        current_statement__ = 15;
        sigma_counts_per = stan::math::lb_constrain(sigma_counts_per, 0, lp__);
      } else {
        current_statement__ = 15;
        sigma_counts_per = stan::math::lb_constrain(sigma_counts_per, 0);
      }
      local_scalar_t__ sigma_counts_thy;
      sigma_counts_thy = DUMMY_VAR__;
      
      current_statement__ = 16;
      sigma_counts_thy = in__.scalar();
      current_statement__ = 16;
      if (jacobian__) {
        current_statement__ = 16;
        sigma_counts_thy = stan::math::lb_constrain(sigma_counts_thy, 0, lp__);
      } else {
        current_statement__ = 16;
        sigma_counts_thy = stan::math::lb_constrain(sigma_counts_thy, 0);
      }
      local_scalar_t__ sigma_Nfd_per;
      sigma_Nfd_per = DUMMY_VAR__;
      
      current_statement__ = 17;
      sigma_Nfd_per = in__.scalar();
      current_statement__ = 17;
      if (jacobian__) {
        current_statement__ = 17;
        sigma_Nfd_per = stan::math::lb_constrain(sigma_Nfd_per, 0, lp__);
      } else {
        current_statement__ = 17;
        sigma_Nfd_per = stan::math::lb_constrain(sigma_Nfd_per, 0);
      }
      local_scalar_t__ sigma_Nfd_thy;
      sigma_Nfd_thy = DUMMY_VAR__;
      
      current_statement__ = 18;
      sigma_Nfd_thy = in__.scalar();
      current_statement__ = 18;
      if (jacobian__) {
        current_statement__ = 18;
        sigma_Nfd_thy = stan::math::lb_constrain(sigma_Nfd_thy, 0, lp__);
      } else {
        current_statement__ = 18;
        sigma_Nfd_thy = stan::math::lb_constrain(sigma_Nfd_thy, 0);
      }
      local_scalar_t__ sigma_donor_ki_per;
      sigma_donor_ki_per = DUMMY_VAR__;
      
      current_statement__ = 19;
      sigma_donor_ki_per = in__.scalar();
      current_statement__ = 19;
      if (jacobian__) {
        current_statement__ = 19;
        sigma_donor_ki_per = stan::math::lb_constrain(sigma_donor_ki_per, 0,
                               lp__);
      } else {
        current_statement__ = 19;
        sigma_donor_ki_per = stan::math::lb_constrain(sigma_donor_ki_per, 0);
      }
      local_scalar_t__ sigma_donor_ki_thy;
      sigma_donor_ki_thy = DUMMY_VAR__;
      
      current_statement__ = 20;
      sigma_donor_ki_thy = in__.scalar();
      current_statement__ = 20;
      if (jacobian__) {
        current_statement__ = 20;
        sigma_donor_ki_thy = stan::math::lb_constrain(sigma_donor_ki_thy, 0,
                               lp__);
      } else {
        current_statement__ = 20;
        sigma_donor_ki_thy = stan::math::lb_constrain(sigma_donor_ki_thy, 0);
      }
      local_scalar_t__ sigma_host_ki_per;
      sigma_host_ki_per = DUMMY_VAR__;
      
      current_statement__ = 21;
      sigma_host_ki_per = in__.scalar();
      current_statement__ = 21;
      if (jacobian__) {
        current_statement__ = 21;
        sigma_host_ki_per = stan::math::lb_constrain(sigma_host_ki_per, 0,
                              lp__);
      } else {
        current_statement__ = 21;
        sigma_host_ki_per = stan::math::lb_constrain(sigma_host_ki_per, 0);
      }
      local_scalar_t__ sigma_host_ki_thy;
      sigma_host_ki_thy = DUMMY_VAR__;
      
      current_statement__ = 22;
      sigma_host_ki_thy = in__.scalar();
      current_statement__ = 22;
      if (jacobian__) {
        current_statement__ = 22;
        sigma_host_ki_thy = stan::math::lb_constrain(sigma_host_ki_thy, 0,
                              lp__);
      } else {
        current_statement__ = 22;
        sigma_host_ki_thy = stan::math::lb_constrain(sigma_host_ki_thy, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> global_params;
      global_params = Eigen::Matrix<local_scalar_t__, -1, 1>(14);
      stan::math::fill(global_params, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> counts_thy_solve;
      counts_thy_solve = Eigen::Matrix<local_scalar_t__, -1, 1>(n_solve);
      stan::math::fill(counts_thy_solve, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> counts_per_solve;
      counts_per_solve = Eigen::Matrix<local_scalar_t__, -1, 1>(n_solve);
      stan::math::fill(counts_per_solve, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Nfd_thy_solve;
      Nfd_thy_solve = Eigen::Matrix<local_scalar_t__, -1, 1>(n_solve);
      stan::math::fill(Nfd_thy_solve, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Nfd_per_solve;
      Nfd_per_solve = Eigen::Matrix<local_scalar_t__, -1, 1>(n_solve);
      stan::math::fill(Nfd_per_solve, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> ki_host_thy_solve;
      ki_host_thy_solve = Eigen::Matrix<local_scalar_t__, -1, 1>(n_solve);
      stan::math::fill(ki_host_thy_solve, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> ki_host_per_solve;
      ki_host_per_solve = Eigen::Matrix<local_scalar_t__, -1, 1>(n_solve);
      stan::math::fill(ki_host_per_solve, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> ki_donor_thy_solve;
      ki_donor_thy_solve = Eigen::Matrix<local_scalar_t__, -1, 1>(n_solve);
      stan::math::fill(ki_donor_thy_solve, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> ki_donor_per_solve;
      ki_donor_per_solve = Eigen::Matrix<local_scalar_t__, -1, 1>(n_solve);
      stan::math::fill(ki_donor_per_solve, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y_mean_stacked;
      y_mean_stacked = Eigen::Matrix<local_scalar_t__, -1, 1>(y_mean_stacked_1dim__);
      stan::math::fill(y_mean_stacked, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> counts_thy_mean;
      counts_thy_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numObs1);
      stan::math::fill(counts_thy_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> counts_per_mean;
      counts_per_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numObs1);
      stan::math::fill(counts_per_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Nfd_thy_mean;
      Nfd_thy_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numObs2);
      stan::math::fill(Nfd_thy_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Nfd_per_mean;
      Nfd_per_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numObs2);
      stan::math::fill(Nfd_per_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> ki_host_thy_mean;
      ki_host_thy_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numObs4);
      stan::math::fill(ki_host_thy_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> ki_host_per_mean;
      ki_host_per_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numObs4);
      stan::math::fill(ki_host_per_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> ki_donor_thy_mean;
      ki_donor_thy_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numObs3);
      stan::math::fill(ki_donor_thy_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> ki_donor_per_mean;
      ki_donor_per_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(numObs3);
      stan::math::fill(ki_donor_per_mean, DUMMY_VAR__);
      
      current_statement__ = 41;
      assign(global_params, psi,
        "assigning variable global_params", index_uni(1));
      current_statement__ = 42;
      assign(global_params, rho_D,
        "assigning variable global_params", index_uni(2));
      current_statement__ = 43;
      assign(global_params, alpha,
        "assigning variable global_params", index_uni(3));
      current_statement__ = 44;
      assign(global_params, lambda_D,
        "assigning variable global_params", index_uni(4));
      current_statement__ = 45;
      assign(global_params, rho_I,
        "assigning variable global_params", index_uni(5));
      current_statement__ = 46;
      assign(global_params, Beta,
        "assigning variable global_params", index_uni(6));
      current_statement__ = 47;
      assign(global_params, stan::math::exp(y1_0),
        "assigning variable global_params", index_uni(7));
      current_statement__ = 48;
      assign(global_params, stan::math::exp(y2_0),
        "assigning variable global_params", index_uni(8));
      current_statement__ = 49;
      assign(global_params, stan::math::exp(y3_0),
        "assigning variable global_params", index_uni(9));
      current_statement__ = 50;
      assign(global_params, stan::math::exp(y4_0),
        "assigning variable global_params", index_uni(10));
      current_statement__ = 51;
      assign(global_params, stan::math::exp(y5_0),
        "assigning variable global_params", index_uni(11));
      current_statement__ = 52;
      assign(global_params, stan::math::exp(y6_0),
        "assigning variable global_params", index_uni(12));
      current_statement__ = 53;
      assign(global_params, stan::math::exp(y7_0),
        "assigning variable global_params", index_uni(13));
      current_statement__ = 54;
      assign(global_params, stan::math::exp(y8_0),
        "assigning variable global_params", index_uni(14));
      current_statement__ = 55;
      assign(y_mean_stacked,
        map_rect<1, math_reduce_functor__>(global_params, local_params, x_r,
          x_i, pstream__), "assigning variable y_mean_stacked");
      current_statement__ = 65;
      for (int i = 1; i <= n_solve; ++i) {
        current_statement__ = 56;
        assign(counts_thy_solve,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((8 * i) - 7))),
          "assigning variable counts_thy_solve", index_uni(i));
        current_statement__ = 57;
        assign(counts_per_solve,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((8 * i) - 6))),
          "assigning variable counts_per_solve", index_uni(i));
        current_statement__ = 58;
        assign(Nfd_thy_solve,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((8 * i) - 5))),
          "assigning variable Nfd_thy_solve", index_uni(i));
        current_statement__ = 59;
        assign(Nfd_per_solve,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((8 * i) - 4))),
          "assigning variable Nfd_per_solve", index_uni(i));
        current_statement__ = 60;
        assign(ki_host_thy_solve,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((8 * i) - 3))),
          "assigning variable ki_host_thy_solve", index_uni(i));
        current_statement__ = 61;
        assign(ki_host_per_solve,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((8 * i) - 2))),
          "assigning variable ki_host_per_solve", index_uni(i));
        current_statement__ = 62;
        assign(ki_donor_thy_solve,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((8 * i) - 1))),
          "assigning variable ki_donor_thy_solve", index_uni(i));
        current_statement__ = 63;
        assign(ki_donor_per_solve,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni((8 * i))),
          "assigning variable ki_donor_per_solve", index_uni(i));}
      current_statement__ = 69;
      for (int i = 1; i <= numObs1; ++i) {
        current_statement__ = 66;
        assign(counts_thy_mean,
          rvalue(counts_thy_solve, "counts_thy_solve",
            index_uni(rvalue(time_index_counts, "time_index_counts",
                        index_uni(i)))),
          "assigning variable counts_thy_mean", index_uni(i));
        current_statement__ = 67;
        assign(counts_per_mean,
          rvalue(counts_per_solve, "counts_per_solve",
            index_uni(rvalue(time_index_counts, "time_index_counts",
                        index_uni(i)))),
          "assigning variable counts_per_mean", index_uni(i));}
      current_statement__ = 73;
      for (int i = 1; i <= numObs2; ++i) {
        current_statement__ = 70;
        assign(Nfd_thy_mean,
          rvalue(Nfd_thy_solve, "Nfd_thy_solve",
            index_uni(rvalue(time_index_chi, "time_index_chi", index_uni(i)))),
          "assigning variable Nfd_thy_mean", index_uni(i));
        current_statement__ = 71;
        assign(Nfd_per_mean,
          rvalue(Nfd_per_solve, "Nfd_per_solve",
            index_uni(rvalue(time_index_chi, "time_index_chi", index_uni(i)))),
          "assigning variable Nfd_per_mean", index_uni(i));}
      current_statement__ = 77;
      for (int i = 1; i <= numObs3; ++i) {
        current_statement__ = 74;
        assign(ki_donor_thy_mean,
          rvalue(ki_donor_thy_solve, "ki_donor_thy_solve",
            index_uni(rvalue(time_index_donorki, "time_index_donorki",
                        index_uni(i)))),
          "assigning variable ki_donor_thy_mean", index_uni(i));
        current_statement__ = 75;
        assign(ki_donor_per_mean,
          rvalue(ki_donor_per_solve, "ki_donor_per_solve",
            index_uni(rvalue(time_index_donorki, "time_index_donorki",
                        index_uni(i)))),
          "assigning variable ki_donor_per_mean", index_uni(i));}
      current_statement__ = 81;
      for (int i = 1; i <= numObs4; ++i) {
        current_statement__ = 78;
        assign(ki_host_thy_mean,
          rvalue(ki_host_thy_solve, "ki_host_thy_solve",
            index_uni(rvalue(time_index_hostki, "time_index_hostki",
                        index_uni(i)))),
          "assigning variable ki_host_thy_mean", index_uni(i));
        current_statement__ = 79;
        assign(ki_host_per_mean,
          rvalue(ki_host_per_solve, "ki_host_per_solve",
            index_uni(rvalue(time_index_hostki, "time_index_hostki",
                        index_uni(i)))),
          "assigning variable ki_host_per_mean", index_uni(i));}
      {
        current_statement__ = 208;
        lp_accum__.add(normal_lpdf<propto__>(psi, 0.3, 0.2));
        current_statement__ = 209;
        lp_accum__.add(normal_lpdf<propto__>(rho_D, 0.005, 0.25));
        current_statement__ = 210;
        lp_accum__.add(normal_lpdf<propto__>(alpha, 0.1, 0.25));
        current_statement__ = 211;
        lp_accum__.add(normal_lpdf<propto__>(lambda_D, 0.05, 0.25));
        current_statement__ = 212;
        lp_accum__.add(normal_lpdf<propto__>(rho_I, 0.01, 0.25));
        current_statement__ = 213;
        lp_accum__.add(normal_lpdf<propto__>(Beta, 0.01, 0.25));
        current_statement__ = 214;
        lp_accum__.add(normal_lpdf<propto__>(y1_0, 9, 2.5));
        current_statement__ = 215;
        lp_accum__.add(normal_lpdf<propto__>(y2_0, 11, 2.5));
        current_statement__ = 216;
        lp_accum__.add(normal_lpdf<propto__>(y3_0, 9, 2.5));
        current_statement__ = 217;
        lp_accum__.add(normal_lpdf<propto__>(y4_0, 11, 2.5));
        current_statement__ = 218;
        lp_accum__.add(normal_lpdf<propto__>(y5_0, 12, 2.5));
        current_statement__ = 219;
        lp_accum__.add(normal_lpdf<propto__>(y6_0, 13, 2.5));
        current_statement__ = 220;
        lp_accum__.add(normal_lpdf<propto__>(y7_0, 11, 2.5));
        current_statement__ = 221;
        lp_accum__.add(normal_lpdf<propto__>(y8_0, 12, 2.5));
        current_statement__ = 222;
        lp_accum__.add(normal_lpdf<propto__>(sigma_counts_per, 0.5, 0.5));
        current_statement__ = 223;
        lp_accum__.add(normal_lpdf<propto__>(sigma_counts_thy, 0.7, 0.5));
        current_statement__ = 224;
        lp_accum__.add(normal_lpdf<propto__>(sigma_Nfd_per, 0.4, 0.5));
        current_statement__ = 225;
        lp_accum__.add(normal_lpdf<propto__>(sigma_Nfd_thy, 0.4, 0.5));
        current_statement__ = 226;
        lp_accum__.add(normal_lpdf<propto__>(sigma_donor_ki_per, 0.3, 0.5));
        current_statement__ = 227;
        lp_accum__.add(normal_lpdf<propto__>(sigma_donor_ki_thy, 0.3, 0.5));
        current_statement__ = 228;
        lp_accum__.add(normal_lpdf<propto__>(sigma_host_ki_per, 0.2, 2));
        current_statement__ = 229;
        lp_accum__.add(normal_lpdf<propto__>(sigma_host_ki_thy, 0.3, 2));
        current_statement__ = 230;
        lp_accum__.add(
          normal_lpdf<propto__>(stan::math::log(counts_thy),
            stan::math::log(counts_thy_mean), sigma_counts_thy));
        current_statement__ = 231;
        lp_accum__.add(
          normal_lpdf<propto__>(stan::math::log(counts_per),
            stan::math::log(counts_per_mean), sigma_counts_per));
        current_statement__ = 232;
        lp_accum__.add(
          normal_lpdf<propto__>(asinsqrt_array(Nfd_thy, pstream__),
            asinsqrt_array(to_array_1d(Nfd_thy_mean), pstream__),
            sigma_Nfd_thy));
        current_statement__ = 233;
        lp_accum__.add(
          normal_lpdf<propto__>(asinsqrt_array(Nfd_per, pstream__),
            asinsqrt_array(to_array_1d(Nfd_per_mean), pstream__),
            sigma_Nfd_per));
        current_statement__ = 234;
        lp_accum__.add(
          normal_lpdf<propto__>(asinsqrt_array(ki_donor_thy, pstream__),
            asinsqrt_array(to_array_1d(ki_donor_thy_mean), pstream__),
            sigma_donor_ki_thy));
        current_statement__ = 235;
        lp_accum__.add(
          normal_lpdf<propto__>(asinsqrt_array(ki_donor_per, pstream__),
            asinsqrt_array(to_array_1d(ki_donor_per_mean), pstream__),
            sigma_donor_ki_per));
        current_statement__ = 236;
        lp_accum__.add(
          normal_lpdf<propto__>(asinsqrt_array(ki_host_thy, pstream__),
            asinsqrt_array(to_array_1d(ki_host_thy_mean), pstream__),
            sigma_host_ki_thy));
        current_statement__ = 237;
        lp_accum__.add(
          normal_lpdf<propto__>(asinsqrt_array(ki_host_per, pstream__),
            asinsqrt_array(to_array_1d(ki_host_per_mean), pstream__),
            sigma_host_ki_per));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_Incumbent_full_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double psi;
      psi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      psi = in__.scalar();
      current_statement__ = 1;
      psi = stan::math::lub_constrain(psi, 0, 1);
      double rho_D;
      rho_D = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      rho_D = in__.scalar();
      current_statement__ = 2;
      rho_D = stan::math::lub_constrain(rho_D, 0, 1);
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      alpha = in__.scalar();
      current_statement__ = 3;
      alpha = stan::math::lub_constrain(alpha, 0, 1);
      double lambda_D;
      lambda_D = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      lambda_D = in__.scalar();
      current_statement__ = 4;
      lambda_D = stan::math::lub_constrain(lambda_D, 0, 1);
      double rho_I;
      rho_I = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      rho_I = in__.scalar();
      current_statement__ = 5;
      rho_I = stan::math::lub_constrain(rho_I, 0, 1);
      double Beta;
      Beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      Beta = in__.scalar();
      current_statement__ = 6;
      Beta = stan::math::lub_constrain(Beta, 0, 1);
      double y1_0;
      y1_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      y1_0 = in__.scalar();
      current_statement__ = 7;
      y1_0 = stan::math::lb_constrain(y1_0, 0);
      double y2_0;
      y2_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      y2_0 = in__.scalar();
      current_statement__ = 8;
      y2_0 = stan::math::lb_constrain(y2_0, 0);
      double y3_0;
      y3_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      y3_0 = in__.scalar();
      current_statement__ = 9;
      y3_0 = stan::math::lb_constrain(y3_0, 0);
      double y4_0;
      y4_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      y4_0 = in__.scalar();
      current_statement__ = 10;
      y4_0 = stan::math::lb_constrain(y4_0, 0);
      double y5_0;
      y5_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      y5_0 = in__.scalar();
      current_statement__ = 11;
      y5_0 = stan::math::lb_constrain(y5_0, 0);
      double y6_0;
      y6_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      y6_0 = in__.scalar();
      current_statement__ = 12;
      y6_0 = stan::math::lb_constrain(y6_0, 0);
      double y7_0;
      y7_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      y7_0 = in__.scalar();
      current_statement__ = 13;
      y7_0 = stan::math::lb_constrain(y7_0, 0);
      double y8_0;
      y8_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      y8_0 = in__.scalar();
      current_statement__ = 14;
      y8_0 = stan::math::lb_constrain(y8_0, 0);
      double sigma_counts_per;
      sigma_counts_per = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      sigma_counts_per = in__.scalar();
      current_statement__ = 15;
      sigma_counts_per = stan::math::lb_constrain(sigma_counts_per, 0);
      double sigma_counts_thy;
      sigma_counts_thy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      sigma_counts_thy = in__.scalar();
      current_statement__ = 16;
      sigma_counts_thy = stan::math::lb_constrain(sigma_counts_thy, 0);
      double sigma_Nfd_per;
      sigma_Nfd_per = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      sigma_Nfd_per = in__.scalar();
      current_statement__ = 17;
      sigma_Nfd_per = stan::math::lb_constrain(sigma_Nfd_per, 0);
      double sigma_Nfd_thy;
      sigma_Nfd_thy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 18;
      sigma_Nfd_thy = in__.scalar();
      current_statement__ = 18;
      sigma_Nfd_thy = stan::math::lb_constrain(sigma_Nfd_thy, 0);
      double sigma_donor_ki_per;
      sigma_donor_ki_per = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 19;
      sigma_donor_ki_per = in__.scalar();
      current_statement__ = 19;
      sigma_donor_ki_per = stan::math::lb_constrain(sigma_donor_ki_per, 0);
      double sigma_donor_ki_thy;
      sigma_donor_ki_thy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 20;
      sigma_donor_ki_thy = in__.scalar();
      current_statement__ = 20;
      sigma_donor_ki_thy = stan::math::lb_constrain(sigma_donor_ki_thy, 0);
      double sigma_host_ki_per;
      sigma_host_ki_per = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 21;
      sigma_host_ki_per = in__.scalar();
      current_statement__ = 21;
      sigma_host_ki_per = stan::math::lb_constrain(sigma_host_ki_per, 0);
      double sigma_host_ki_thy;
      sigma_host_ki_thy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 22;
      sigma_host_ki_thy = in__.scalar();
      current_statement__ = 22;
      sigma_host_ki_thy = stan::math::lb_constrain(sigma_host_ki_thy, 0);
      Eigen::Matrix<double, -1, 1> global_params;
      global_params = Eigen::Matrix<double, -1, 1>(14);
      stan::math::fill(global_params, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> counts_thy_solve;
      counts_thy_solve = Eigen::Matrix<double, -1, 1>(n_solve);
      stan::math::fill(counts_thy_solve, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> counts_per_solve;
      counts_per_solve = Eigen::Matrix<double, -1, 1>(n_solve);
      stan::math::fill(counts_per_solve, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Nfd_thy_solve;
      Nfd_thy_solve = Eigen::Matrix<double, -1, 1>(n_solve);
      stan::math::fill(Nfd_thy_solve, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Nfd_per_solve;
      Nfd_per_solve = Eigen::Matrix<double, -1, 1>(n_solve);
      stan::math::fill(Nfd_per_solve, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> ki_host_thy_solve;
      ki_host_thy_solve = Eigen::Matrix<double, -1, 1>(n_solve);
      stan::math::fill(ki_host_thy_solve, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> ki_host_per_solve;
      ki_host_per_solve = Eigen::Matrix<double, -1, 1>(n_solve);
      stan::math::fill(ki_host_per_solve, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> ki_donor_thy_solve;
      ki_donor_thy_solve = Eigen::Matrix<double, -1, 1>(n_solve);
      stan::math::fill(ki_donor_thy_solve, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> ki_donor_per_solve;
      ki_donor_per_solve = Eigen::Matrix<double, -1, 1>(n_solve);
      stan::math::fill(ki_donor_per_solve, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y_mean_stacked;
      y_mean_stacked = Eigen::Matrix<double, -1, 1>(y_mean_stacked_1dim__);
      stan::math::fill(y_mean_stacked, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> counts_thy_mean;
      counts_thy_mean = Eigen::Matrix<double, -1, 1>(numObs1);
      stan::math::fill(counts_thy_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> counts_per_mean;
      counts_per_mean = Eigen::Matrix<double, -1, 1>(numObs1);
      stan::math::fill(counts_per_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Nfd_thy_mean;
      Nfd_thy_mean = Eigen::Matrix<double, -1, 1>(numObs2);
      stan::math::fill(Nfd_thy_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Nfd_per_mean;
      Nfd_per_mean = Eigen::Matrix<double, -1, 1>(numObs2);
      stan::math::fill(Nfd_per_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> ki_host_thy_mean;
      ki_host_thy_mean = Eigen::Matrix<double, -1, 1>(numObs4);
      stan::math::fill(ki_host_thy_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> ki_host_per_mean;
      ki_host_per_mean = Eigen::Matrix<double, -1, 1>(numObs4);
      stan::math::fill(ki_host_per_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> ki_donor_thy_mean;
      ki_donor_thy_mean = Eigen::Matrix<double, -1, 1>(numObs3);
      stan::math::fill(ki_donor_thy_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> ki_donor_per_mean;
      ki_donor_per_mean = Eigen::Matrix<double, -1, 1>(numObs3);
      stan::math::fill(ki_donor_per_mean, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(psi);
      vars__.emplace_back(rho_D);
      vars__.emplace_back(alpha);
      vars__.emplace_back(lambda_D);
      vars__.emplace_back(rho_I);
      vars__.emplace_back(Beta);
      vars__.emplace_back(y1_0);
      vars__.emplace_back(y2_0);
      vars__.emplace_back(y3_0);
      vars__.emplace_back(y4_0);
      vars__.emplace_back(y5_0);
      vars__.emplace_back(y6_0);
      vars__.emplace_back(y7_0);
      vars__.emplace_back(y8_0);
      vars__.emplace_back(sigma_counts_per);
      vars__.emplace_back(sigma_counts_thy);
      vars__.emplace_back(sigma_Nfd_per);
      vars__.emplace_back(sigma_Nfd_thy);
      vars__.emplace_back(sigma_donor_ki_per);
      vars__.emplace_back(sigma_donor_ki_thy);
      vars__.emplace_back(sigma_host_ki_per);
      vars__.emplace_back(sigma_host_ki_thy);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 41;
      assign(global_params, psi,
        "assigning variable global_params", index_uni(1));
      current_statement__ = 42;
      assign(global_params, rho_D,
        "assigning variable global_params", index_uni(2));
      current_statement__ = 43;
      assign(global_params, alpha,
        "assigning variable global_params", index_uni(3));
      current_statement__ = 44;
      assign(global_params, lambda_D,
        "assigning variable global_params", index_uni(4));
      current_statement__ = 45;
      assign(global_params, rho_I,
        "assigning variable global_params", index_uni(5));
      current_statement__ = 46;
      assign(global_params, Beta,
        "assigning variable global_params", index_uni(6));
      current_statement__ = 47;
      assign(global_params, stan::math::exp(y1_0),
        "assigning variable global_params", index_uni(7));
      current_statement__ = 48;
      assign(global_params, stan::math::exp(y2_0),
        "assigning variable global_params", index_uni(8));
      current_statement__ = 49;
      assign(global_params, stan::math::exp(y3_0),
        "assigning variable global_params", index_uni(9));
      current_statement__ = 50;
      assign(global_params, stan::math::exp(y4_0),
        "assigning variable global_params", index_uni(10));
      current_statement__ = 51;
      assign(global_params, stan::math::exp(y5_0),
        "assigning variable global_params", index_uni(11));
      current_statement__ = 52;
      assign(global_params, stan::math::exp(y6_0),
        "assigning variable global_params", index_uni(12));
      current_statement__ = 53;
      assign(global_params, stan::math::exp(y7_0),
        "assigning variable global_params", index_uni(13));
      current_statement__ = 54;
      assign(global_params, stan::math::exp(y8_0),
        "assigning variable global_params", index_uni(14));
      current_statement__ = 55;
      assign(y_mean_stacked,
        map_rect<2, math_reduce_functor__>(global_params, local_params, x_r,
          x_i, pstream__), "assigning variable y_mean_stacked");
      current_statement__ = 65;
      for (int i = 1; i <= n_solve; ++i) {
        current_statement__ = 56;
        assign(counts_thy_solve,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((8 * i) - 7))),
          "assigning variable counts_thy_solve", index_uni(i));
        current_statement__ = 57;
        assign(counts_per_solve,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((8 * i) - 6))),
          "assigning variable counts_per_solve", index_uni(i));
        current_statement__ = 58;
        assign(Nfd_thy_solve,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((8 * i) - 5))),
          "assigning variable Nfd_thy_solve", index_uni(i));
        current_statement__ = 59;
        assign(Nfd_per_solve,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((8 * i) - 4))),
          "assigning variable Nfd_per_solve", index_uni(i));
        current_statement__ = 60;
        assign(ki_host_thy_solve,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((8 * i) - 3))),
          "assigning variable ki_host_thy_solve", index_uni(i));
        current_statement__ = 61;
        assign(ki_host_per_solve,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((8 * i) - 2))),
          "assigning variable ki_host_per_solve", index_uni(i));
        current_statement__ = 62;
        assign(ki_donor_thy_solve,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((8 * i) - 1))),
          "assigning variable ki_donor_thy_solve", index_uni(i));
        current_statement__ = 63;
        assign(ki_donor_per_solve,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni((8 * i))),
          "assigning variable ki_donor_per_solve", index_uni(i));}
      current_statement__ = 69;
      for (int i = 1; i <= numObs1; ++i) {
        current_statement__ = 66;
        assign(counts_thy_mean,
          rvalue(counts_thy_solve, "counts_thy_solve",
            index_uni(rvalue(time_index_counts, "time_index_counts",
                        index_uni(i)))),
          "assigning variable counts_thy_mean", index_uni(i));
        current_statement__ = 67;
        assign(counts_per_mean,
          rvalue(counts_per_solve, "counts_per_solve",
            index_uni(rvalue(time_index_counts, "time_index_counts",
                        index_uni(i)))),
          "assigning variable counts_per_mean", index_uni(i));}
      current_statement__ = 73;
      for (int i = 1; i <= numObs2; ++i) {
        current_statement__ = 70;
        assign(Nfd_thy_mean,
          rvalue(Nfd_thy_solve, "Nfd_thy_solve",
            index_uni(rvalue(time_index_chi, "time_index_chi", index_uni(i)))),
          "assigning variable Nfd_thy_mean", index_uni(i));
        current_statement__ = 71;
        assign(Nfd_per_mean,
          rvalue(Nfd_per_solve, "Nfd_per_solve",
            index_uni(rvalue(time_index_chi, "time_index_chi", index_uni(i)))),
          "assigning variable Nfd_per_mean", index_uni(i));}
      current_statement__ = 77;
      for (int i = 1; i <= numObs3; ++i) {
        current_statement__ = 74;
        assign(ki_donor_thy_mean,
          rvalue(ki_donor_thy_solve, "ki_donor_thy_solve",
            index_uni(rvalue(time_index_donorki, "time_index_donorki",
                        index_uni(i)))),
          "assigning variable ki_donor_thy_mean", index_uni(i));
        current_statement__ = 75;
        assign(ki_donor_per_mean,
          rvalue(ki_donor_per_solve, "ki_donor_per_solve",
            index_uni(rvalue(time_index_donorki, "time_index_donorki",
                        index_uni(i)))),
          "assigning variable ki_donor_per_mean", index_uni(i));}
      current_statement__ = 81;
      for (int i = 1; i <= numObs4; ++i) {
        current_statement__ = 78;
        assign(ki_host_thy_mean,
          rvalue(ki_host_thy_solve, "ki_host_thy_solve",
            index_uni(rvalue(time_index_hostki, "time_index_hostki",
                        index_uni(i)))),
          "assigning variable ki_host_thy_mean", index_uni(i));
        current_statement__ = 79;
        assign(ki_host_per_mean,
          rvalue(ki_host_per_solve, "ki_host_per_solve",
            index_uni(rvalue(time_index_hostki, "time_index_hostki",
                        index_uni(i)))),
          "assigning variable ki_host_per_mean", index_uni(i));}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 14; ++sym1__) {
          vars__.emplace_back(global_params[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
          vars__.emplace_back(counts_thy_solve[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
          vars__.emplace_back(counts_per_solve[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
          vars__.emplace_back(Nfd_thy_solve[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
          vars__.emplace_back(Nfd_per_solve[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
          vars__.emplace_back(ki_host_thy_solve[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
          vars__.emplace_back(ki_host_per_solve[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
          vars__.emplace_back(ki_donor_thy_solve[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
          vars__.emplace_back(ki_donor_per_solve[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
          vars__.emplace_back(y_mean_stacked[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
          vars__.emplace_back(counts_thy_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
          vars__.emplace_back(counts_per_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
          vars__.emplace_back(Nfd_thy_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
          vars__.emplace_back(Nfd_per_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs4; ++sym1__) {
          vars__.emplace_back(ki_host_thy_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs4; ++sym1__) {
          vars__.emplace_back(ki_host_per_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs3; ++sym1__) {
          vars__.emplace_back(ki_donor_thy_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs3; ++sym1__) {
          vars__.emplace_back(ki_donor_per_mean[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<std::vector<double>> y_simple_pred1;
      y_simple_pred1 = std::vector<std::vector<double>>(numPred, std::vector<double>(6, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> y_simple_pred2;
      y_simple_pred2 = std::vector<std::vector<double>>(numPred, std::vector<double>(6, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> y_simple_pred3;
      y_simple_pred3 = std::vector<std::vector<double>>(numPred, std::vector<double>(6, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> y_simple_pred4;
      y_simple_pred4 = std::vector<std::vector<double>>(numPred, std::vector<double>(6, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> y_chi_pred1;
      y_chi_pred1 = std::vector<std::vector<double>>(numPred, std::vector<double>(12, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> y_chi_pred2;
      y_chi_pred2 = std::vector<std::vector<double>>(numPred, std::vector<double>(12, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> y_chi_pred3;
      y_chi_pred3 = std::vector<std::vector<double>>(numPred, std::vector<double>(12, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> y_chi_pred4;
      y_chi_pred4 = std::vector<std::vector<double>>(numPred, std::vector<double>(12, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<double> counts_thy_mean_pred1;
      counts_thy_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> counts_per_mean_pred1;
      counts_per_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> counts_thy_mean_pred2;
      counts_thy_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> counts_per_mean_pred2;
      counts_per_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> counts_thy_mean_pred3;
      counts_thy_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> counts_per_mean_pred3;
      counts_per_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> counts_thy_mean_pred4;
      counts_thy_mean_pred4 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> counts_per_mean_pred4;
      counts_per_mean_pred4 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_thy_mean_pred1;
      Nfd_thy_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_per_mean_pred1;
      Nfd_per_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_thy_mean_pred2;
      Nfd_thy_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_per_mean_pred2;
      Nfd_per_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_thy_mean_pred3;
      Nfd_thy_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_per_mean_pred3;
      Nfd_per_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_thy_mean_pred4;
      Nfd_thy_mean_pred4 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_per_mean_pred4;
      Nfd_per_mean_pred4 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ki_donor_per_mean_pred1;
      ki_donor_per_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ki_donor_thy_mean_pred1;
      ki_donor_thy_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ki_donor_per_mean_pred2;
      ki_donor_per_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ki_donor_thy_mean_pred2;
      ki_donor_thy_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ki_donor_per_mean_pred3;
      ki_donor_per_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ki_donor_thy_mean_pred3;
      ki_donor_thy_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ki_donor_per_mean_pred4;
      ki_donor_per_mean_pred4 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ki_donor_thy_mean_pred4;
      ki_donor_thy_mean_pred4 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ki_host_per_mean_pred1;
      ki_host_per_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ki_host_thy_mean_pred1;
      ki_host_thy_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ki_host_per_mean_pred2;
      ki_host_per_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ki_host_thy_mean_pred2;
      ki_host_thy_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ki_host_per_mean_pred3;
      ki_host_per_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ki_host_thy_mean_pred3;
      ki_host_thy_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ki_host_per_mean_pred4;
      ki_host_per_mean_pred4 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ki_host_thy_mean_pred4;
      ki_host_thy_mean_pred4 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_counts_thy;
      log_lik_counts_thy = Eigen::Matrix<double, -1, 1>(numObs1);
      stan::math::fill(log_lik_counts_thy, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_counts_per;
      log_lik_counts_per = Eigen::Matrix<double, -1, 1>(numObs1);
      stan::math::fill(log_lik_counts_per, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_Nfd_thy;
      log_lik_Nfd_thy = Eigen::Matrix<double, -1, 1>(numObs2);
      stan::math::fill(log_lik_Nfd_thy, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_Nfd_per;
      log_lik_Nfd_per = Eigen::Matrix<double, -1, 1>(numObs2);
      stan::math::fill(log_lik_Nfd_per, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_ki_donor_thy;
      log_lik_ki_donor_thy = Eigen::Matrix<double, -1, 1>(numObs3);
      stan::math::fill(log_lik_ki_donor_thy, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_ki_donor_per;
      log_lik_ki_donor_per = Eigen::Matrix<double, -1, 1>(numObs3);
      stan::math::fill(log_lik_ki_donor_per, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_ki_host_thy;
      log_lik_ki_host_thy = Eigen::Matrix<double, -1, 1>(numObs4);
      stan::math::fill(log_lik_ki_host_thy, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_ki_host_per;
      log_lik_ki_host_per = Eigen::Matrix<double, -1, 1>(numObs4);
      stan::math::fill(log_lik_ki_host_per, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> init_cond1;
      init_cond1 = std::vector<double>(6, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> init_cond2;
      init_cond2 = std::vector<double>(12, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 132;
      assign(init_cond1, (stan::math::exp(y1_0) + stan::math::exp(y2_0)),
        "assigning variable init_cond1", index_uni(1));
      current_statement__ = 133;
      assign(init_cond1, (stan::math::exp(y3_0) + stan::math::exp(y4_0)),
        "assigning variable init_cond1", index_uni(2));
      current_statement__ = 134;
      assign(init_cond1, (stan::math::exp(y5_0) + stan::math::exp(y6_0)),
        "assigning variable init_cond1", index_uni(3));
      current_statement__ = 135;
      assign(init_cond1, (stan::math::exp(y7_0) + stan::math::exp(y8_0)),
        "assigning variable init_cond1", index_uni(4));
      current_statement__ = 136;
      assign(init_cond1, 0, "assigning variable init_cond1", index_uni(5));
      current_statement__ = 137;
      assign(init_cond1, 0, "assigning variable init_cond1", index_uni(6));
      current_statement__ = 138;
      assign(init_cond2, stan::math::exp(y1_0),
        "assigning variable init_cond2", index_uni(1));
      current_statement__ = 139;
      assign(init_cond2, stan::math::exp(y2_0),
        "assigning variable init_cond2", index_uni(2));
      current_statement__ = 140;
      assign(init_cond2, stan::math::exp(y3_0),
        "assigning variable init_cond2", index_uni(3));
      current_statement__ = 141;
      assign(init_cond2, stan::math::exp(y4_0),
        "assigning variable init_cond2", index_uni(4));
      current_statement__ = 142;
      assign(init_cond2, stan::math::exp(y5_0),
        "assigning variable init_cond2", index_uni(5));
      current_statement__ = 143;
      assign(init_cond2, stan::math::exp(y6_0),
        "assigning variable init_cond2", index_uni(6));
      current_statement__ = 144;
      assign(init_cond2, stan::math::exp(y7_0),
        "assigning variable init_cond2", index_uni(7));
      current_statement__ = 145;
      assign(init_cond2, stan::math::exp(y8_0),
        "assigning variable init_cond2", index_uni(8));
      current_statement__ = 146;
      assign(init_cond2, 0, "assigning variable init_cond2", index_uni(9));
      current_statement__ = 147;
      assign(init_cond2, 0, "assigning variable init_cond2", index_uni(10));
      current_statement__ = 148;
      assign(init_cond2, 0, "assigning variable init_cond2", index_uni(11));
      current_statement__ = 149;
      assign(init_cond2, 0, "assigning variable init_cond2", index_uni(12));
      current_statement__ = 150;
      assign(y_simple_pred1,
        solve_ode_chi1(ts_pred1, tb_pred1, init_cond1,
          to_array_1d(global_params), pstream__),
        "assigning variable y_simple_pred1");
      current_statement__ = 151;
      assign(y_simple_pred2,
        solve_ode_chi1(ts_pred2, tb_pred2, init_cond1,
          to_array_1d(global_params), pstream__),
        "assigning variable y_simple_pred2");
      current_statement__ = 152;
      assign(y_simple_pred3,
        solve_ode_chi1(ts_pred3, tb_pred3, init_cond1,
          to_array_1d(global_params), pstream__),
        "assigning variable y_simple_pred3");
      current_statement__ = 153;
      assign(y_simple_pred4,
        solve_ode_chi1(ts_pred4, tb_pred4, init_cond1,
          to_array_1d(global_params), pstream__),
        "assigning variable y_simple_pred4");
      current_statement__ = 154;
      assign(y_chi_pred1,
        solve_ode_chi2(ts_pred1, tb_pred1, init_cond2,
          to_array_1d(global_params), pstream__),
        "assigning variable y_chi_pred1");
      current_statement__ = 155;
      assign(y_chi_pred2,
        solve_ode_chi2(ts_pred2, tb_pred2, init_cond2,
          to_array_1d(global_params), pstream__),
        "assigning variable y_chi_pred2");
      current_statement__ = 156;
      assign(y_chi_pred3,
        solve_ode_chi2(ts_pred3, tb_pred3, init_cond2,
          to_array_1d(global_params), pstream__),
        "assigning variable y_chi_pred3");
      current_statement__ = 157;
      assign(y_chi_pred4,
        solve_ode_chi2(ts_pred4, tb_pred4, init_cond2,
          to_array_1d(global_params), pstream__),
        "assigning variable y_chi_pred4");
      current_statement__ = 191;
      for (int i = 1; i <= numPred; ++i) {
        current_statement__ = 158;
        assign(counts_thy_mean_pred1,
          ((rvalue(y_simple_pred1, "y_simple_pred1",
              index_uni(i), index_uni(1)) +
             rvalue(y_simple_pred1, "y_simple_pred1",
               index_uni(i), index_uni(4))) +
            rvalue(y_simple_pred1, "y_simple_pred1",
              index_uni(i), index_uni(5))),
          "assigning variable counts_thy_mean_pred1", index_uni(i));
        current_statement__ = 159;
        assign(counts_thy_mean_pred2,
          ((rvalue(y_simple_pred1, "y_simple_pred1",
              index_uni(i), index_uni(1)) +
             rvalue(y_simple_pred1, "y_simple_pred1",
               index_uni(i), index_uni(4))) +
            rvalue(y_simple_pred1, "y_simple_pred1",
              index_uni(i), index_uni(5))),
          "assigning variable counts_thy_mean_pred2", index_uni(i));
        current_statement__ = 160;
        assign(counts_thy_mean_pred3,
          ((rvalue(y_simple_pred1, "y_simple_pred1",
              index_uni(i), index_uni(1)) +
             rvalue(y_simple_pred1, "y_simple_pred1",
               index_uni(i), index_uni(4))) +
            rvalue(y_simple_pred1, "y_simple_pred1",
              index_uni(i), index_uni(5))),
          "assigning variable counts_thy_mean_pred3", index_uni(i));
        current_statement__ = 161;
        assign(counts_thy_mean_pred4,
          ((rvalue(y_simple_pred1, "y_simple_pred1",
              index_uni(i), index_uni(1)) +
             rvalue(y_simple_pred1, "y_simple_pred1",
               index_uni(i), index_uni(4))) +
            rvalue(y_simple_pred1, "y_simple_pred1",
              index_uni(i), index_uni(5))),
          "assigning variable counts_thy_mean_pred4", index_uni(i));
        current_statement__ = 162;
        assign(counts_per_mean_pred1,
          ((rvalue(y_simple_pred1, "y_simple_pred1",
              index_uni(i), index_uni(2)) +
             rvalue(y_simple_pred1, "y_simple_pred1",
               index_uni(i), index_uni(3))) +
            rvalue(y_simple_pred1, "y_simple_pred1",
              index_uni(i), index_uni(6))),
          "assigning variable counts_per_mean_pred1", index_uni(i));
        current_statement__ = 163;
        assign(counts_per_mean_pred2,
          ((rvalue(y_simple_pred1, "y_simple_pred1",
              index_uni(i), index_uni(2)) +
             rvalue(y_simple_pred1, "y_simple_pred1",
               index_uni(i), index_uni(3))) +
            rvalue(y_simple_pred1, "y_simple_pred1",
              index_uni(i), index_uni(6))),
          "assigning variable counts_per_mean_pred2", index_uni(i));
        current_statement__ = 164;
        assign(counts_per_mean_pred3,
          ((rvalue(y_simple_pred1, "y_simple_pred1",
              index_uni(i), index_uni(2)) +
             rvalue(y_simple_pred1, "y_simple_pred1",
               index_uni(i), index_uni(3))) +
            rvalue(y_simple_pred1, "y_simple_pred1",
              index_uni(i), index_uni(6))),
          "assigning variable counts_per_mean_pred3", index_uni(i));
        current_statement__ = 165;
        assign(counts_per_mean_pred4,
          ((rvalue(y_simple_pred1, "y_simple_pred1",
              index_uni(i), index_uni(2)) +
             rvalue(y_simple_pred1, "y_simple_pred1",
               index_uni(i), index_uni(3))) +
            rvalue(y_simple_pred1, "y_simple_pred1",
              index_uni(i), index_uni(6))),
          "assigning variable counts_per_mean_pred4", index_uni(i));
        current_statement__ = 166;
        assign(Nfd_thy_mean_pred1,
          ((rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(9)) +
             rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(10)))
            /
            (rvalue(counts_thy_mean_pred1, "counts_thy_mean_pred1",
               index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred1, "ts_pred1", index_uni(i)) -
                  rvalue(tb_pred1, "tb_pred1", index_uni(i))), pstream__))),
          "assigning variable Nfd_thy_mean_pred1", index_uni(i));
        current_statement__ = 167;
        assign(Nfd_thy_mean_pred2,
          ((rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(9)) +
             rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(10)))
            /
            (rvalue(counts_thy_mean_pred2, "counts_thy_mean_pred2",
               index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred2, "ts_pred2", index_uni(i)) -
                  rvalue(tb_pred2, "tb_pred2", index_uni(i))), pstream__))),
          "assigning variable Nfd_thy_mean_pred2", index_uni(i));
        current_statement__ = 168;
        assign(Nfd_thy_mean_pred3,
          ((rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(9)) +
             rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(10)))
            /
            (rvalue(counts_thy_mean_pred3, "counts_thy_mean_pred3",
               index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred3, "ts_pred3", index_uni(i)) -
                  rvalue(tb_pred3, "tb_pred3", index_uni(i))), pstream__))),
          "assigning variable Nfd_thy_mean_pred3", index_uni(i));
        current_statement__ = 169;
        assign(Nfd_thy_mean_pred4,
          ((rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(9)) +
             rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(10)))
            /
            (rvalue(counts_thy_mean_pred4, "counts_thy_mean_pred4",
               index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred4, "ts_pred4", index_uni(i)) -
                  rvalue(tb_pred4, "tb_pred4", index_uni(i))), pstream__))),
          "assigning variable Nfd_thy_mean_pred4", index_uni(i));
        current_statement__ = 170;
        assign(Nfd_per_mean_pred1,
          ((rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(11)) +
             rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(12)))
            /
            (rvalue(counts_per_mean_pred1, "counts_per_mean_pred1",
               index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred1, "ts_pred1", index_uni(i)) -
                  rvalue(tb_pred1, "tb_pred1", index_uni(i))), pstream__))),
          "assigning variable Nfd_per_mean_pred1", index_uni(i));
        current_statement__ = 171;
        assign(Nfd_per_mean_pred2,
          ((rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(11)) +
             rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(12)))
            /
            (rvalue(counts_per_mean_pred2, "counts_per_mean_pred2",
               index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred2, "ts_pred2", index_uni(i)) -
                  rvalue(tb_pred2, "tb_pred2", index_uni(i))), pstream__))),
          "assigning variable Nfd_per_mean_pred2", index_uni(i));
        current_statement__ = 172;
        assign(Nfd_per_mean_pred3,
          ((rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(11)) +
             rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(12)))
            /
            (rvalue(counts_per_mean_pred3, "counts_per_mean_pred3",
               index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred3, "ts_pred3", index_uni(i)) -
                  rvalue(tb_pred3, "tb_pred3", index_uni(i))), pstream__))),
          "assigning variable Nfd_per_mean_pred3", index_uni(i));
        current_statement__ = 173;
        assign(Nfd_per_mean_pred4,
          ((rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(11)) +
             rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(12)))
            /
            (rvalue(counts_per_mean_pred4, "counts_per_mean_pred4",
               index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred4, "ts_pred4", index_uni(i)) -
                  rvalue(tb_pred4, "tb_pred4", index_uni(i))), pstream__))),
          "assigning variable Nfd_per_mean_pred4", index_uni(i));
        current_statement__ = 174;
        assign(ki_donor_thy_mean_pred1,
          (rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(9)) /
            (rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(9)) +
              rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(10)))),
          "assigning variable ki_donor_thy_mean_pred1", index_uni(i));
        current_statement__ = 175;
        assign(ki_donor_thy_mean_pred2,
          (rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(9)) /
            (rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(9)) +
              rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(10)))),
          "assigning variable ki_donor_thy_mean_pred2", index_uni(i));
        current_statement__ = 176;
        assign(ki_donor_thy_mean_pred3,
          (rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(9)) /
            (rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(9)) +
              rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(10)))),
          "assigning variable ki_donor_thy_mean_pred3", index_uni(i));
        current_statement__ = 177;
        assign(ki_donor_thy_mean_pred4,
          (rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(9)) /
            (rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(9)) +
              rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(10)))),
          "assigning variable ki_donor_thy_mean_pred4", index_uni(i));
        current_statement__ = 178;
        assign(ki_donor_per_mean_pred1,
          (rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(11)) /
            (rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(11))
              +
              rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(12)))),
          "assigning variable ki_donor_per_mean_pred1", index_uni(i));
        current_statement__ = 179;
        assign(ki_donor_per_mean_pred2,
          (rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(11)) /
            (rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(11))
              +
              rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(12)))),
          "assigning variable ki_donor_per_mean_pred2", index_uni(i));
        current_statement__ = 180;
        assign(ki_donor_per_mean_pred3,
          (rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(11)) /
            (rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(11))
              +
              rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(12)))),
          "assigning variable ki_donor_per_mean_pred3", index_uni(i));
        current_statement__ = 181;
        assign(ki_donor_per_mean_pred4,
          (rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(11)) /
            (rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(11))
              +
              rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(12)))),
          "assigning variable ki_donor_per_mean_pred4", index_uni(i));
        current_statement__ = 182;
        assign(ki_host_thy_mean_pred1,
          ((rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(1)) +
             rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(7)))
            /
            (((rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(1))
                +
                rvalue(y_chi_pred1, "y_chi_pred1",
                  index_uni(i), index_uni(2))) +
               rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(7)))
              +
              rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(8)))),
          "assigning variable ki_host_thy_mean_pred1", index_uni(i));
        current_statement__ = 183;
        assign(ki_host_thy_mean_pred2,
          ((rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(1)) +
             rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(7)))
            /
            (((rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(1))
                +
                rvalue(y_chi_pred2, "y_chi_pred2",
                  index_uni(i), index_uni(2))) +
               rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(7)))
              +
              rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(8)))),
          "assigning variable ki_host_thy_mean_pred2", index_uni(i));
        current_statement__ = 184;
        assign(ki_host_thy_mean_pred3,
          ((rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(1)) +
             rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(7)))
            /
            (((rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(1))
                +
                rvalue(y_chi_pred3, "y_chi_pred3",
                  index_uni(i), index_uni(2))) +
               rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(7)))
              +
              rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(8)))),
          "assigning variable ki_host_thy_mean_pred3", index_uni(i));
        current_statement__ = 185;
        assign(ki_host_thy_mean_pred4,
          ((rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(1)) +
             rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(7)))
            /
            (((rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(1))
                +
                rvalue(y_chi_pred4, "y_chi_pred4",
                  index_uni(i), index_uni(2))) +
               rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(7)))
              +
              rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(8)))),
          "assigning variable ki_host_thy_mean_pred4", index_uni(i));
        current_statement__ = 186;
        assign(ki_host_per_mean_pred1,
          ((rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(3)) +
             rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(5)))
            /
            (((rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(3))
                +
                rvalue(y_chi_pred1, "y_chi_pred1",
                  index_uni(i), index_uni(4))) +
               rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(5)))
              +
              rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(6)))),
          "assigning variable ki_host_per_mean_pred1", index_uni(i));
        current_statement__ = 187;
        assign(ki_host_per_mean_pred2,
          ((rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(3)) +
             rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(5)))
            /
            (((rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(3))
                +
                rvalue(y_chi_pred2, "y_chi_pred2",
                  index_uni(i), index_uni(4))) +
               rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(5)))
              +
              rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(6)))),
          "assigning variable ki_host_per_mean_pred2", index_uni(i));
        current_statement__ = 188;
        assign(ki_host_per_mean_pred3,
          ((rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(3)) +
             rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(5)))
            /
            (((rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(3))
                +
                rvalue(y_chi_pred3, "y_chi_pred3",
                  index_uni(i), index_uni(4))) +
               rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(5)))
              +
              rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(6)))),
          "assigning variable ki_host_per_mean_pred3", index_uni(i));
        current_statement__ = 189;
        assign(ki_host_per_mean_pred4,
          ((rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(3)) +
             rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(5)))
            /
            (((rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(3))
                +
                rvalue(y_chi_pred4, "y_chi_pred4",
                  index_uni(i), index_uni(4))) +
               rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(5)))
              +
              rvalue(y_chi_pred4, "y_chi_pred4", index_uni(i), index_uni(6)))),
          "assigning variable ki_host_per_mean_pred4", index_uni(i));}
      current_statement__ = 195;
      for (int i = 1; i <= numObs1; ++i) {
        current_statement__ = 192;
        assign(log_lik_counts_thy,
          normal_lpdf<false>(
            stan::math::log(rvalue(counts_thy, "counts_thy", index_uni(i))),
            stan::math::log(
              rvalue(counts_thy_mean, "counts_thy_mean", index_uni(i))),
            sigma_counts_thy),
          "assigning variable log_lik_counts_thy", index_uni(i));
        current_statement__ = 193;
        assign(log_lik_counts_per,
          normal_lpdf<false>(
            stan::math::log(rvalue(counts_per, "counts_per", index_uni(i))),
            stan::math::log(
              rvalue(counts_per_mean, "counts_per_mean", index_uni(i))),
            sigma_counts_per),
          "assigning variable log_lik_counts_per", index_uni(i));}
      current_statement__ = 199;
      for (int i = 1; i <= numObs2; ++i) {
        current_statement__ = 196;
        assign(log_lik_Nfd_thy,
          normal_lpdf<false>(
            asinsqrt_real(
              rvalue(Nfd_thy, "Nfd_thy", index_uni(i)), pstream__),
            asinsqrt_real(
              rvalue(Nfd_thy_mean, "Nfd_thy_mean", index_uni(i)), pstream__),
            sigma_Nfd_thy),
          "assigning variable log_lik_Nfd_thy", index_uni(i));
        current_statement__ = 197;
        assign(log_lik_Nfd_per,
          normal_lpdf<false>(
            asinsqrt_real(
              rvalue(Nfd_per, "Nfd_per", index_uni(i)), pstream__),
            asinsqrt_real(
              rvalue(Nfd_per_mean, "Nfd_per_mean", index_uni(i)), pstream__),
            sigma_Nfd_per),
          "assigning variable log_lik_Nfd_per", index_uni(i));}
      current_statement__ = 203;
      for (int i = 1; i <= numObs3; ++i) {
        current_statement__ = 200;
        assign(log_lik_ki_donor_thy,
          normal_lpdf<false>(
            asinsqrt_real(
              rvalue(ki_donor_thy, "ki_donor_thy", index_uni(i)), pstream__),
            asinsqrt_real(
              rvalue(ki_donor_thy_mean, "ki_donor_thy_mean", index_uni(i)), pstream__),
            sigma_donor_ki_thy),
          "assigning variable log_lik_ki_donor_thy", index_uni(i));
        current_statement__ = 201;
        assign(log_lik_ki_donor_per,
          normal_lpdf<false>(
            asinsqrt_real(
              rvalue(ki_donor_per, "ki_donor_per", index_uni(i)), pstream__),
            asinsqrt_real(
              rvalue(ki_donor_per_mean, "ki_donor_per_mean", index_uni(i)), pstream__),
            sigma_donor_ki_per),
          "assigning variable log_lik_ki_donor_per", index_uni(i));}
      current_statement__ = 207;
      for (int i = 1; i <= numObs4; ++i) {
        current_statement__ = 204;
        assign(log_lik_ki_host_thy,
          normal_lpdf<false>(
            asinsqrt_real(
              rvalue(ki_host_thy, "ki_host_thy", index_uni(i)), pstream__),
            asinsqrt_real(
              rvalue(ki_host_thy_mean, "ki_host_thy_mean", index_uni(i)), pstream__),
            sigma_host_ki_thy),
          "assigning variable log_lik_ki_host_thy", index_uni(i));
        current_statement__ = 205;
        assign(log_lik_ki_host_per,
          normal_lpdf<false>(
            asinsqrt_real(
              rvalue(ki_host_per, "ki_host_per", index_uni(i)), pstream__),
            asinsqrt_real(
              rvalue(ki_host_per_mean, "ki_host_per_mean", index_uni(i)), pstream__),
            sigma_host_ki_per),
          "assigning variable log_lik_ki_host_per", index_uni(i));}
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_simple_pred1[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_simple_pred2[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_simple_pred3[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_simple_pred4[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= 12; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_chi_pred1[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= 12; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_chi_pred2[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= 12; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_chi_pred3[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= 12; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_chi_pred4[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(counts_thy_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(counts_per_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(counts_thy_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(counts_per_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(counts_thy_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(counts_per_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(counts_thy_mean_pred4[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(counts_per_mean_pred4[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_thy_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_per_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_thy_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_per_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_thy_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_per_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_thy_mean_pred4[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_per_mean_pred4[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ki_donor_per_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ki_donor_thy_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ki_donor_per_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ki_donor_thy_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ki_donor_per_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ki_donor_thy_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ki_donor_per_mean_pred4[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ki_donor_thy_mean_pred4[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ki_host_per_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ki_host_thy_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ki_host_per_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ki_host_thy_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ki_host_per_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ki_host_thy_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ki_host_per_mean_pred4[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(ki_host_thy_mean_pred4[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        vars__.emplace_back(log_lik_counts_thy[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        vars__.emplace_back(log_lik_counts_per[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        vars__.emplace_back(log_lik_Nfd_thy[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        vars__.emplace_back(log_lik_Nfd_per[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs3; ++sym1__) {
        vars__.emplace_back(log_lik_ki_donor_thy[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs3; ++sym1__) {
        vars__.emplace_back(log_lik_ki_donor_per[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs4; ++sym1__) {
        vars__.emplace_back(log_lik_ki_host_thy[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs4; ++sym1__) {
        vars__.emplace_back(log_lik_ki_host_per[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        vars__.emplace_back(init_cond1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 12; ++sym1__) {
        vars__.emplace_back(init_cond2[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double psi;
      psi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      psi = context__.vals_r("psi")[(1 - 1)];
      double psi_free__;
      psi_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      psi_free__ = stan::math::lub_free(psi, 0, 1);
      double rho_D;
      rho_D = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      rho_D = context__.vals_r("rho_D")[(1 - 1)];
      double rho_D_free__;
      rho_D_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      rho_D_free__ = stan::math::lub_free(rho_D, 0, 1);
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      double alpha_free__;
      alpha_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      alpha_free__ = stan::math::lub_free(alpha, 0, 1);
      double lambda_D;
      lambda_D = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      lambda_D = context__.vals_r("lambda_D")[(1 - 1)];
      double lambda_D_free__;
      lambda_D_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      lambda_D_free__ = stan::math::lub_free(lambda_D, 0, 1);
      double rho_I;
      rho_I = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      rho_I = context__.vals_r("rho_I")[(1 - 1)];
      double rho_I_free__;
      rho_I_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      rho_I_free__ = stan::math::lub_free(rho_I, 0, 1);
      double Beta;
      Beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      Beta = context__.vals_r("Beta")[(1 - 1)];
      double Beta_free__;
      Beta_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      Beta_free__ = stan::math::lub_free(Beta, 0, 1);
      double y1_0;
      y1_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      y1_0 = context__.vals_r("y1_0")[(1 - 1)];
      double y1_0_free__;
      y1_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      y1_0_free__ = stan::math::lb_free(y1_0, 0);
      double y2_0;
      y2_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      y2_0 = context__.vals_r("y2_0")[(1 - 1)];
      double y2_0_free__;
      y2_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      y2_0_free__ = stan::math::lb_free(y2_0, 0);
      double y3_0;
      y3_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      y3_0 = context__.vals_r("y3_0")[(1 - 1)];
      double y3_0_free__;
      y3_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      y3_0_free__ = stan::math::lb_free(y3_0, 0);
      double y4_0;
      y4_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      y4_0 = context__.vals_r("y4_0")[(1 - 1)];
      double y4_0_free__;
      y4_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      y4_0_free__ = stan::math::lb_free(y4_0, 0);
      double y5_0;
      y5_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      y5_0 = context__.vals_r("y5_0")[(1 - 1)];
      double y5_0_free__;
      y5_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      y5_0_free__ = stan::math::lb_free(y5_0, 0);
      double y6_0;
      y6_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      y6_0 = context__.vals_r("y6_0")[(1 - 1)];
      double y6_0_free__;
      y6_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      y6_0_free__ = stan::math::lb_free(y6_0, 0);
      double y7_0;
      y7_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      y7_0 = context__.vals_r("y7_0")[(1 - 1)];
      double y7_0_free__;
      y7_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      y7_0_free__ = stan::math::lb_free(y7_0, 0);
      double y8_0;
      y8_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      y8_0 = context__.vals_r("y8_0")[(1 - 1)];
      double y8_0_free__;
      y8_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      y8_0_free__ = stan::math::lb_free(y8_0, 0);
      double sigma_counts_per;
      sigma_counts_per = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      sigma_counts_per = context__.vals_r("sigma_counts_per")[(1 - 1)];
      double sigma_counts_per_free__;
      sigma_counts_per_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      sigma_counts_per_free__ = stan::math::lb_free(sigma_counts_per, 0);
      double sigma_counts_thy;
      sigma_counts_thy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      sigma_counts_thy = context__.vals_r("sigma_counts_thy")[(1 - 1)];
      double sigma_counts_thy_free__;
      sigma_counts_thy_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      sigma_counts_thy_free__ = stan::math::lb_free(sigma_counts_thy, 0);
      double sigma_Nfd_per;
      sigma_Nfd_per = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      sigma_Nfd_per = context__.vals_r("sigma_Nfd_per")[(1 - 1)];
      double sigma_Nfd_per_free__;
      sigma_Nfd_per_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      sigma_Nfd_per_free__ = stan::math::lb_free(sigma_Nfd_per, 0);
      double sigma_Nfd_thy;
      sigma_Nfd_thy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 18;
      sigma_Nfd_thy = context__.vals_r("sigma_Nfd_thy")[(1 - 1)];
      double sigma_Nfd_thy_free__;
      sigma_Nfd_thy_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 18;
      sigma_Nfd_thy_free__ = stan::math::lb_free(sigma_Nfd_thy, 0);
      double sigma_donor_ki_per;
      sigma_donor_ki_per = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 19;
      sigma_donor_ki_per = context__.vals_r("sigma_donor_ki_per")[(1 - 1)];
      double sigma_donor_ki_per_free__;
      sigma_donor_ki_per_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 19;
      sigma_donor_ki_per_free__ = stan::math::lb_free(sigma_donor_ki_per, 0);
      double sigma_donor_ki_thy;
      sigma_donor_ki_thy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 20;
      sigma_donor_ki_thy = context__.vals_r("sigma_donor_ki_thy")[(1 - 1)];
      double sigma_donor_ki_thy_free__;
      sigma_donor_ki_thy_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 20;
      sigma_donor_ki_thy_free__ = stan::math::lb_free(sigma_donor_ki_thy, 0);
      double sigma_host_ki_per;
      sigma_host_ki_per = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 21;
      sigma_host_ki_per = context__.vals_r("sigma_host_ki_per")[(1 - 1)];
      double sigma_host_ki_per_free__;
      sigma_host_ki_per_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 21;
      sigma_host_ki_per_free__ = stan::math::lb_free(sigma_host_ki_per, 0);
      double sigma_host_ki_thy;
      sigma_host_ki_thy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 22;
      sigma_host_ki_thy = context__.vals_r("sigma_host_ki_thy")[(1 - 1)];
      double sigma_host_ki_thy_free__;
      sigma_host_ki_thy_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 22;
      sigma_host_ki_thy_free__ = stan::math::lb_free(sigma_host_ki_thy, 0);
      vars__.emplace_back(psi_free__);
      vars__.emplace_back(rho_D_free__);
      vars__.emplace_back(alpha_free__);
      vars__.emplace_back(lambda_D_free__);
      vars__.emplace_back(rho_I_free__);
      vars__.emplace_back(Beta_free__);
      vars__.emplace_back(y1_0_free__);
      vars__.emplace_back(y2_0_free__);
      vars__.emplace_back(y3_0_free__);
      vars__.emplace_back(y4_0_free__);
      vars__.emplace_back(y5_0_free__);
      vars__.emplace_back(y6_0_free__);
      vars__.emplace_back(y7_0_free__);
      vars__.emplace_back(y8_0_free__);
      vars__.emplace_back(sigma_counts_per_free__);
      vars__.emplace_back(sigma_counts_thy_free__);
      vars__.emplace_back(sigma_Nfd_per_free__);
      vars__.emplace_back(sigma_Nfd_thy_free__);
      vars__.emplace_back(sigma_donor_ki_per_free__);
      vars__.emplace_back(sigma_donor_ki_thy_free__);
      vars__.emplace_back(sigma_host_ki_per_free__);
      vars__.emplace_back(sigma_host_ki_thy_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("psi");
    names__.emplace_back("rho_D");
    names__.emplace_back("alpha");
    names__.emplace_back("lambda_D");
    names__.emplace_back("rho_I");
    names__.emplace_back("Beta");
    names__.emplace_back("y1_0");
    names__.emplace_back("y2_0");
    names__.emplace_back("y3_0");
    names__.emplace_back("y4_0");
    names__.emplace_back("y5_0");
    names__.emplace_back("y6_0");
    names__.emplace_back("y7_0");
    names__.emplace_back("y8_0");
    names__.emplace_back("sigma_counts_per");
    names__.emplace_back("sigma_counts_thy");
    names__.emplace_back("sigma_Nfd_per");
    names__.emplace_back("sigma_Nfd_thy");
    names__.emplace_back("sigma_donor_ki_per");
    names__.emplace_back("sigma_donor_ki_thy");
    names__.emplace_back("sigma_host_ki_per");
    names__.emplace_back("sigma_host_ki_thy");
    names__.emplace_back("global_params");
    names__.emplace_back("counts_thy_solve");
    names__.emplace_back("counts_per_solve");
    names__.emplace_back("Nfd_thy_solve");
    names__.emplace_back("Nfd_per_solve");
    names__.emplace_back("ki_host_thy_solve");
    names__.emplace_back("ki_host_per_solve");
    names__.emplace_back("ki_donor_thy_solve");
    names__.emplace_back("ki_donor_per_solve");
    names__.emplace_back("y_mean_stacked");
    names__.emplace_back("counts_thy_mean");
    names__.emplace_back("counts_per_mean");
    names__.emplace_back("Nfd_thy_mean");
    names__.emplace_back("Nfd_per_mean");
    names__.emplace_back("ki_host_thy_mean");
    names__.emplace_back("ki_host_per_mean");
    names__.emplace_back("ki_donor_thy_mean");
    names__.emplace_back("ki_donor_per_mean");
    names__.emplace_back("y_simple_pred1");
    names__.emplace_back("y_simple_pred2");
    names__.emplace_back("y_simple_pred3");
    names__.emplace_back("y_simple_pred4");
    names__.emplace_back("y_chi_pred1");
    names__.emplace_back("y_chi_pred2");
    names__.emplace_back("y_chi_pred3");
    names__.emplace_back("y_chi_pred4");
    names__.emplace_back("counts_thy_mean_pred1");
    names__.emplace_back("counts_per_mean_pred1");
    names__.emplace_back("counts_thy_mean_pred2");
    names__.emplace_back("counts_per_mean_pred2");
    names__.emplace_back("counts_thy_mean_pred3");
    names__.emplace_back("counts_per_mean_pred3");
    names__.emplace_back("counts_thy_mean_pred4");
    names__.emplace_back("counts_per_mean_pred4");
    names__.emplace_back("Nfd_thy_mean_pred1");
    names__.emplace_back("Nfd_per_mean_pred1");
    names__.emplace_back("Nfd_thy_mean_pred2");
    names__.emplace_back("Nfd_per_mean_pred2");
    names__.emplace_back("Nfd_thy_mean_pred3");
    names__.emplace_back("Nfd_per_mean_pred3");
    names__.emplace_back("Nfd_thy_mean_pred4");
    names__.emplace_back("Nfd_per_mean_pred4");
    names__.emplace_back("ki_donor_per_mean_pred1");
    names__.emplace_back("ki_donor_thy_mean_pred1");
    names__.emplace_back("ki_donor_per_mean_pred2");
    names__.emplace_back("ki_donor_thy_mean_pred2");
    names__.emplace_back("ki_donor_per_mean_pred3");
    names__.emplace_back("ki_donor_thy_mean_pred3");
    names__.emplace_back("ki_donor_per_mean_pred4");
    names__.emplace_back("ki_donor_thy_mean_pred4");
    names__.emplace_back("ki_host_per_mean_pred1");
    names__.emplace_back("ki_host_thy_mean_pred1");
    names__.emplace_back("ki_host_per_mean_pred2");
    names__.emplace_back("ki_host_thy_mean_pred2");
    names__.emplace_back("ki_host_per_mean_pred3");
    names__.emplace_back("ki_host_thy_mean_pred3");
    names__.emplace_back("ki_host_per_mean_pred4");
    names__.emplace_back("ki_host_thy_mean_pred4");
    names__.emplace_back("log_lik_counts_thy");
    names__.emplace_back("log_lik_counts_per");
    names__.emplace_back("log_lik_Nfd_thy");
    names__.emplace_back("log_lik_Nfd_per");
    names__.emplace_back("log_lik_ki_donor_thy");
    names__.emplace_back("log_lik_ki_donor_per");
    names__.emplace_back("log_lik_ki_host_thy");
    names__.emplace_back("log_lik_ki_host_per");
    names__.emplace_back("init_cond1");
    names__.emplace_back("init_cond2");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(14)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_solve)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_solve)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_solve)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_solve)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_solve)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_solve)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_solve)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_solve)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(y_mean_stacked_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs4)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs4)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs3)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs3)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(6)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(6)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(6)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(6)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(12)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(12)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(12)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(12)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs3)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs3)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs4)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs4)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(6)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(12)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "psi");
    param_names__.emplace_back(std::string() + "rho_D");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "lambda_D");
    param_names__.emplace_back(std::string() + "rho_I");
    param_names__.emplace_back(std::string() + "Beta");
    param_names__.emplace_back(std::string() + "y1_0");
    param_names__.emplace_back(std::string() + "y2_0");
    param_names__.emplace_back(std::string() + "y3_0");
    param_names__.emplace_back(std::string() + "y4_0");
    param_names__.emplace_back(std::string() + "y5_0");
    param_names__.emplace_back(std::string() + "y6_0");
    param_names__.emplace_back(std::string() + "y7_0");
    param_names__.emplace_back(std::string() + "y8_0");
    param_names__.emplace_back(std::string() + "sigma_counts_per");
    param_names__.emplace_back(std::string() + "sigma_counts_thy");
    param_names__.emplace_back(std::string() + "sigma_Nfd_per");
    param_names__.emplace_back(std::string() + "sigma_Nfd_thy");
    param_names__.emplace_back(std::string() + "sigma_donor_ki_per");
    param_names__.emplace_back(std::string() + "sigma_donor_ki_thy");
    param_names__.emplace_back(std::string() + "sigma_host_ki_per");
    param_names__.emplace_back(std::string() + "sigma_host_ki_thy");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 14; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "global_params" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_thy_solve" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_per_solve" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_thy_solve" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_per_solve" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_thy_solve" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_per_solve" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_thy_solve" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_per_solve" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mean_stacked" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_thy_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_per_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_thy_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_per_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_thy_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_per_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_thy_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_per_mean" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_simple_pred1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_simple_pred2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_simple_pred3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_simple_pred4" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 12; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 12; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 12; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 12; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred4" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_thy_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_per_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_thy_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_per_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_thy_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_per_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_thy_mean_pred4" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_per_mean_pred4" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_thy_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_per_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_thy_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_per_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_thy_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_per_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_thy_mean_pred4" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_per_mean_pred4" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_per_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_thy_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_per_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_thy_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_per_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_thy_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_per_mean_pred4" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_thy_mean_pred4" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_per_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_thy_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_per_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_thy_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_per_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_thy_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_per_mean_pred4" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_thy_mean_pred4" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_counts_thy" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_counts_per" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_Nfd_thy" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_Nfd_per" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ki_donor_thy" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ki_donor_per" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ki_host_thy" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ki_host_per" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "init_cond1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 12; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "init_cond2" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "psi");
    param_names__.emplace_back(std::string() + "rho_D");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "lambda_D");
    param_names__.emplace_back(std::string() + "rho_I");
    param_names__.emplace_back(std::string() + "Beta");
    param_names__.emplace_back(std::string() + "y1_0");
    param_names__.emplace_back(std::string() + "y2_0");
    param_names__.emplace_back(std::string() + "y3_0");
    param_names__.emplace_back(std::string() + "y4_0");
    param_names__.emplace_back(std::string() + "y5_0");
    param_names__.emplace_back(std::string() + "y6_0");
    param_names__.emplace_back(std::string() + "y7_0");
    param_names__.emplace_back(std::string() + "y8_0");
    param_names__.emplace_back(std::string() + "sigma_counts_per");
    param_names__.emplace_back(std::string() + "sigma_counts_thy");
    param_names__.emplace_back(std::string() + "sigma_Nfd_per");
    param_names__.emplace_back(std::string() + "sigma_Nfd_thy");
    param_names__.emplace_back(std::string() + "sigma_donor_ki_per");
    param_names__.emplace_back(std::string() + "sigma_donor_ki_thy");
    param_names__.emplace_back(std::string() + "sigma_host_ki_per");
    param_names__.emplace_back(std::string() + "sigma_host_ki_thy");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 14; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "global_params" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_thy_solve" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_per_solve" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_thy_solve" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_per_solve" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_thy_solve" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_per_solve" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_thy_solve" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_solve; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_per_solve" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mean_stacked" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_thy_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_per_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_thy_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_per_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_thy_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_per_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_thy_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_per_mean" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_simple_pred1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_simple_pred2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_simple_pred3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_simple_pred4" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 12; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 12; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 12; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 12; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred4" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_thy_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_per_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_thy_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_per_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_thy_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_per_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_thy_mean_pred4" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "counts_per_mean_pred4" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_thy_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_per_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_thy_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_per_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_thy_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_per_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_thy_mean_pred4" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_per_mean_pred4" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_per_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_thy_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_per_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_thy_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_per_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_thy_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_per_mean_pred4" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_donor_thy_mean_pred4" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_per_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_thy_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_per_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_thy_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_per_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_thy_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_per_mean_pred4" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki_host_thy_mean_pred4" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_counts_thy" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_counts_per" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_Nfd_thy" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_Nfd_per" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ki_donor_thy" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ki_donor_per" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ki_host_thy" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_ki_host_per" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "init_cond1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 12; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "init_cond2" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"psi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_D\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_D\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_I\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y1_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y2_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y3_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y4_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y5_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y6_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y7_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y8_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_counts_per\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_counts_thy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_Nfd_per\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_Nfd_thy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_donor_ki_per\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_donor_ki_thy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_host_ki_per\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_host_ki_thy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_params\",\"type\":{\"name\":\"vector\",\"length\":" << 14 << "},\"block\":\"transformed_parameters\"},{\"name\":\"counts_thy_solve\",\"type\":{\"name\":\"vector\",\"length\":" << n_solve << "},\"block\":\"transformed_parameters\"},{\"name\":\"counts_per_solve\",\"type\":{\"name\":\"vector\",\"length\":" << n_solve << "},\"block\":\"transformed_parameters\"},{\"name\":\"Nfd_thy_solve\",\"type\":{\"name\":\"vector\",\"length\":" << n_solve << "},\"block\":\"transformed_parameters\"},{\"name\":\"Nfd_per_solve\",\"type\":{\"name\":\"vector\",\"length\":" << n_solve << "},\"block\":\"transformed_parameters\"},{\"name\":\"ki_host_thy_solve\",\"type\":{\"name\":\"vector\",\"length\":" << n_solve << "},\"block\":\"transformed_parameters\"},{\"name\":\"ki_host_per_solve\",\"type\":{\"name\":\"vector\",\"length\":" << n_solve << "},\"block\":\"transformed_parameters\"},{\"name\":\"ki_donor_thy_solve\",\"type\":{\"name\":\"vector\",\"length\":" << n_solve << "},\"block\":\"transformed_parameters\"},{\"name\":\"ki_donor_per_solve\",\"type\":{\"name\":\"vector\",\"length\":" << n_solve << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_mean_stacked\",\"type\":{\"name\":\"vector\",\"length\":" << y_mean_stacked_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"counts_thy_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"counts_per_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"Nfd_thy_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"Nfd_per_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"ki_host_thy_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs4 << "},\"block\":\"transformed_parameters\"},{\"name\":\"ki_host_per_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs4 << "},\"block\":\"transformed_parameters\"},{\"name\":\"ki_donor_thy_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs3 << "},\"block\":\"transformed_parameters\"},{\"name\":\"ki_donor_per_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs3 << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_simple_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 6 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_simple_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 6 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_simple_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 6 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_simple_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 6 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 12 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 12 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 12 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 12 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"counts_thy_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"counts_per_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"counts_thy_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"counts_per_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"counts_thy_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"counts_per_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"counts_thy_mean_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"counts_per_mean_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_thy_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_per_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_thy_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_per_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_thy_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_per_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_thy_mean_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_per_mean_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_donor_per_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_donor_thy_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_donor_per_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_donor_thy_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_donor_per_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_donor_thy_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_donor_per_mean_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_donor_thy_mean_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_host_per_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_host_thy_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_host_per_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_host_thy_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_host_per_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_host_thy_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_host_per_mean_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_host_thy_mean_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_counts_thy\",\"type\":{\"name\":\"vector\",\"length\":" << numObs1 << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_counts_per\",\"type\":{\"name\":\"vector\",\"length\":" << numObs1 << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_Nfd_thy\",\"type\":{\"name\":\"vector\",\"length\":" << numObs2 << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_Nfd_per\",\"type\":{\"name\":\"vector\",\"length\":" << numObs2 << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ki_donor_thy\",\"type\":{\"name\":\"vector\",\"length\":" << numObs3 << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ki_donor_per\",\"type\":{\"name\":\"vector\",\"length\":" << numObs3 << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ki_host_thy\",\"type\":{\"name\":\"vector\",\"length\":" << numObs4 << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ki_host_per\",\"type\":{\"name\":\"vector\",\"length\":" << numObs4 << "},\"block\":\"generated_quantities\"},{\"name\":\"init_cond1\",\"type\":{\"name\":\"array\",\"length\":" << 6 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"init_cond2\",\"type\":{\"name\":\"array\",\"length\":" << 12 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"psi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_D\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_D\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_I\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y1_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y2_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y3_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y4_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y5_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y6_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y7_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y8_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_counts_per\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_counts_thy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_Nfd_per\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_Nfd_thy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_donor_ki_per\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_donor_ki_thy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_host_ki_per\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_host_ki_thy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_params\",\"type\":{\"name\":\"vector\",\"length\":" << 14 << "},\"block\":\"transformed_parameters\"},{\"name\":\"counts_thy_solve\",\"type\":{\"name\":\"vector\",\"length\":" << n_solve << "},\"block\":\"transformed_parameters\"},{\"name\":\"counts_per_solve\",\"type\":{\"name\":\"vector\",\"length\":" << n_solve << "},\"block\":\"transformed_parameters\"},{\"name\":\"Nfd_thy_solve\",\"type\":{\"name\":\"vector\",\"length\":" << n_solve << "},\"block\":\"transformed_parameters\"},{\"name\":\"Nfd_per_solve\",\"type\":{\"name\":\"vector\",\"length\":" << n_solve << "},\"block\":\"transformed_parameters\"},{\"name\":\"ki_host_thy_solve\",\"type\":{\"name\":\"vector\",\"length\":" << n_solve << "},\"block\":\"transformed_parameters\"},{\"name\":\"ki_host_per_solve\",\"type\":{\"name\":\"vector\",\"length\":" << n_solve << "},\"block\":\"transformed_parameters\"},{\"name\":\"ki_donor_thy_solve\",\"type\":{\"name\":\"vector\",\"length\":" << n_solve << "},\"block\":\"transformed_parameters\"},{\"name\":\"ki_donor_per_solve\",\"type\":{\"name\":\"vector\",\"length\":" << n_solve << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_mean_stacked\",\"type\":{\"name\":\"vector\",\"length\":" << y_mean_stacked_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"counts_thy_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"counts_per_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"Nfd_thy_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"Nfd_per_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"ki_host_thy_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs4 << "},\"block\":\"transformed_parameters\"},{\"name\":\"ki_host_per_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs4 << "},\"block\":\"transformed_parameters\"},{\"name\":\"ki_donor_thy_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs3 << "},\"block\":\"transformed_parameters\"},{\"name\":\"ki_donor_per_mean\",\"type\":{\"name\":\"vector\",\"length\":" << numObs3 << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_simple_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 6 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_simple_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 6 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_simple_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 6 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_simple_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 6 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 12 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 12 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 12 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 12 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"counts_thy_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"counts_per_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"counts_thy_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"counts_per_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"counts_thy_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"counts_per_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"counts_thy_mean_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"counts_per_mean_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_thy_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_per_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_thy_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_per_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_thy_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_per_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_thy_mean_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_per_mean_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_donor_per_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_donor_thy_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_donor_per_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_donor_thy_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_donor_per_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_donor_thy_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_donor_per_mean_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_donor_thy_mean_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_host_per_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_host_thy_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_host_per_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_host_thy_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_host_per_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_host_thy_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_host_per_mean_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ki_host_thy_mean_pred4\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_counts_thy\",\"type\":{\"name\":\"vector\",\"length\":" << numObs1 << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_counts_per\",\"type\":{\"name\":\"vector\",\"length\":" << numObs1 << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_Nfd_thy\",\"type\":{\"name\":\"vector\",\"length\":" << numObs2 << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_Nfd_per\",\"type\":{\"name\":\"vector\",\"length\":" << numObs2 << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ki_donor_thy\",\"type\":{\"name\":\"vector\",\"length\":" << numObs3 << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ki_donor_per\",\"type\":{\"name\":\"vector\",\"length\":" << numObs3 << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ki_host_thy\",\"type\":{\"name\":\"vector\",\"length\":" << numObs4 << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_ki_host_per\",\"type\":{\"name\":\"vector\",\"length\":" << numObs4 << "},\"block\":\"generated_quantities\"},{\"name\":\"init_cond1\",\"type\":{\"name\":\"array\",\"length\":" << 6 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"init_cond2\",\"type\":{\"name\":\"array\",\"length\":" << 12 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = MAP_Incumbent_full_model_namespace::MAP_Incumbent_full_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return MAP_Incumbent_full_model_namespace::profiles__;
}

#endif


STAN_REGISTER_MAP_RECT(1, MAP_Incumbent_full_model_namespace::math_reduce_functor__)
STAN_REGISTER_MAP_RECT(2, MAP_Incumbent_full_model_namespace::math_reduce_functor__)